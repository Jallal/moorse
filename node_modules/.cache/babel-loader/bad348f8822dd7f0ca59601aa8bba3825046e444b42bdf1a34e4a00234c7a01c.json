{"ast":null,"code":"import { Pair } from '../nodes/Pair.js';\nimport { YAMLMap } from '../nodes/YAMLMap.js';\nimport { resolveProps } from './resolve-props.js';\nimport { containsNewline } from './util-contains-newline.js';\nimport { flowIndentCheck } from './util-flow-indent-check.js';\nimport { mapIncludes } from './util-map-includes.js';\nconst startColMsg = 'All mapping items must start at the same column';\nfunction resolveBlockMap(_ref, ctx, bm, onError) {\n  let {\n    composeNode,\n    composeEmptyNode\n  } = _ref;\n  const map = new YAMLMap(ctx.schema);\n  if (ctx.atRoot) ctx.atRoot = false;\n  let offset = bm.offset;\n  let commentEnd = null;\n  for (const collItem of bm.items) {\n    const {\n      start,\n      key,\n      sep,\n      value\n    } = collItem;\n    // key properties\n    const keyProps = resolveProps(start, {\n      indicator: 'explicit-key-ind',\n      next: key ?? sep?.[0],\n      offset,\n      onError,\n      startOnNewline: true\n    });\n    const implicitKey = !keyProps.found;\n    if (implicitKey) {\n      if (key) {\n        if (key.type === 'block-seq') onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'A block sequence may not be used as an implicit map key');else if ('indent' in key && key.indent !== bm.indent) onError(offset, 'BAD_INDENT', startColMsg);\n      }\n      if (!keyProps.anchor && !keyProps.tag && !sep) {\n        commentEnd = keyProps.end;\n        if (keyProps.comment) {\n          if (map.comment) map.comment += '\\n' + keyProps.comment;else map.comment = keyProps.comment;\n        }\n        continue;\n      }\n      if (keyProps.hasNewlineAfterProp || containsNewline(key)) {\n        onError(key ?? start[start.length - 1], 'MULTILINE_IMPLICIT_KEY', 'Implicit keys need to be on a single line');\n      }\n    } else if (keyProps.found?.indent !== bm.indent) {\n      onError(offset, 'BAD_INDENT', startColMsg);\n    }\n    // key value\n    const keyStart = keyProps.end;\n    const keyNode = key ? composeNode(ctx, key, keyProps, onError) : composeEmptyNode(ctx, keyStart, start, null, keyProps, onError);\n    if (ctx.schema.compat) flowIndentCheck(bm.indent, key, onError);\n    if (mapIncludes(ctx, map.items, keyNode)) onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');\n    // value properties\n    const valueProps = resolveProps(sep ?? [], {\n      indicator: 'map-value-ind',\n      next: value,\n      offset: keyNode.range[2],\n      onError,\n      startOnNewline: !key || key.type === 'block-scalar'\n    });\n    offset = valueProps.end;\n    if (valueProps.found) {\n      if (implicitKey) {\n        if (value?.type === 'block-map' && !valueProps.hasNewline) onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'Nested mappings are not allowed in compact mappings');\n        if (ctx.options.strict && keyProps.start < valueProps.found.offset - 1024) onError(keyNode.range, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit block mapping key');\n      }\n      // value value\n      const valueNode = value ? composeNode(ctx, value, valueProps, onError) : composeEmptyNode(ctx, offset, sep, null, valueProps, onError);\n      if (ctx.schema.compat) flowIndentCheck(bm.indent, value, onError);\n      offset = valueNode.range[2];\n      const pair = new Pair(keyNode, valueNode);\n      if (ctx.options.keepSourceTokens) pair.srcToken = collItem;\n      map.items.push(pair);\n    } else {\n      // key with no value\n      if (implicitKey) onError(keyNode.range, 'MISSING_CHAR', 'Implicit map keys need to be followed by map values');\n      if (valueProps.comment) {\n        if (keyNode.comment) keyNode.comment += '\\n' + valueProps.comment;else keyNode.comment = valueProps.comment;\n      }\n      const pair = new Pair(keyNode);\n      if (ctx.options.keepSourceTokens) pair.srcToken = collItem;\n      map.items.push(pair);\n    }\n  }\n  if (commentEnd && commentEnd < offset) onError(commentEnd, 'IMPOSSIBLE', 'Map comment with trailing content');\n  map.range = [bm.offset, offset, commentEnd ?? offset];\n  return map;\n}\nexport { resolveBlockMap };","map":{"version":3,"names":["Pair","YAMLMap","resolveProps","containsNewline","flowIndentCheck","mapIncludes","startColMsg","resolveBlockMap","ctx","bm","onError","composeNode","composeEmptyNode","map","schema","atRoot","offset","commentEnd","collItem","items","start","key","sep","value","keyProps","indicator","next","startOnNewline","implicitKey","found","type","indent","anchor","tag","end","comment","hasNewlineAfterProp","length","keyStart","keyNode","compat","valueProps","range","hasNewline","options","strict","valueNode","pair","keepSourceTokens","srcToken","push"],"sources":["/Users/jhazzatgmail.com/Documents/moorseapp/node_modules/yaml/browser/dist/compose/resolve-block-map.js"],"sourcesContent":["import { Pair } from '../nodes/Pair.js';\nimport { YAMLMap } from '../nodes/YAMLMap.js';\nimport { resolveProps } from './resolve-props.js';\nimport { containsNewline } from './util-contains-newline.js';\nimport { flowIndentCheck } from './util-flow-indent-check.js';\nimport { mapIncludes } from './util-map-includes.js';\n\nconst startColMsg = 'All mapping items must start at the same column';\nfunction resolveBlockMap({ composeNode, composeEmptyNode }, ctx, bm, onError) {\n    const map = new YAMLMap(ctx.schema);\n    if (ctx.atRoot)\n        ctx.atRoot = false;\n    let offset = bm.offset;\n    let commentEnd = null;\n    for (const collItem of bm.items) {\n        const { start, key, sep, value } = collItem;\n        // key properties\n        const keyProps = resolveProps(start, {\n            indicator: 'explicit-key-ind',\n            next: key ?? sep?.[0],\n            offset,\n            onError,\n            startOnNewline: true\n        });\n        const implicitKey = !keyProps.found;\n        if (implicitKey) {\n            if (key) {\n                if (key.type === 'block-seq')\n                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'A block sequence may not be used as an implicit map key');\n                else if ('indent' in key && key.indent !== bm.indent)\n                    onError(offset, 'BAD_INDENT', startColMsg);\n            }\n            if (!keyProps.anchor && !keyProps.tag && !sep) {\n                commentEnd = keyProps.end;\n                if (keyProps.comment) {\n                    if (map.comment)\n                        map.comment += '\\n' + keyProps.comment;\n                    else\n                        map.comment = keyProps.comment;\n                }\n                continue;\n            }\n            if (keyProps.hasNewlineAfterProp || containsNewline(key)) {\n                onError(key ?? start[start.length - 1], 'MULTILINE_IMPLICIT_KEY', 'Implicit keys need to be on a single line');\n            }\n        }\n        else if (keyProps.found?.indent !== bm.indent) {\n            onError(offset, 'BAD_INDENT', startColMsg);\n        }\n        // key value\n        const keyStart = keyProps.end;\n        const keyNode = key\n            ? composeNode(ctx, key, keyProps, onError)\n            : composeEmptyNode(ctx, keyStart, start, null, keyProps, onError);\n        if (ctx.schema.compat)\n            flowIndentCheck(bm.indent, key, onError);\n        if (mapIncludes(ctx, map.items, keyNode))\n            onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');\n        // value properties\n        const valueProps = resolveProps(sep ?? [], {\n            indicator: 'map-value-ind',\n            next: value,\n            offset: keyNode.range[2],\n            onError,\n            startOnNewline: !key || key.type === 'block-scalar'\n        });\n        offset = valueProps.end;\n        if (valueProps.found) {\n            if (implicitKey) {\n                if (value?.type === 'block-map' && !valueProps.hasNewline)\n                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'Nested mappings are not allowed in compact mappings');\n                if (ctx.options.strict &&\n                    keyProps.start < valueProps.found.offset - 1024)\n                    onError(keyNode.range, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit block mapping key');\n            }\n            // value value\n            const valueNode = value\n                ? composeNode(ctx, value, valueProps, onError)\n                : composeEmptyNode(ctx, offset, sep, null, valueProps, onError);\n            if (ctx.schema.compat)\n                flowIndentCheck(bm.indent, value, onError);\n            offset = valueNode.range[2];\n            const pair = new Pair(keyNode, valueNode);\n            if (ctx.options.keepSourceTokens)\n                pair.srcToken = collItem;\n            map.items.push(pair);\n        }\n        else {\n            // key with no value\n            if (implicitKey)\n                onError(keyNode.range, 'MISSING_CHAR', 'Implicit map keys need to be followed by map values');\n            if (valueProps.comment) {\n                if (keyNode.comment)\n                    keyNode.comment += '\\n' + valueProps.comment;\n                else\n                    keyNode.comment = valueProps.comment;\n            }\n            const pair = new Pair(keyNode);\n            if (ctx.options.keepSourceTokens)\n                pair.srcToken = collItem;\n            map.items.push(pair);\n        }\n    }\n    if (commentEnd && commentEnd < offset)\n        onError(commentEnd, 'IMPOSSIBLE', 'Map comment with trailing content');\n    map.range = [bm.offset, offset, commentEnd ?? offset];\n    return map;\n}\n\nexport { resolveBlockMap };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}