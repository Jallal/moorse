{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Button } from './../main';\nimport { classNames, guid, Keys, kendoThemeMaps } from '@progress/kendo-react-common';\nimport { dispatchEvent } from '@progress/kendo-react-common';\nimport { navigate as navigation } from './utils/navigation';\nimport { DropDownButtonItem } from './DropDownButtonItem';\nimport { ButtonItem } from './ButtonItem';\nimport { Popup } from '@progress/kendo-react-popup';\nimport { getAnchorAlign, getPopupAlign } from './utils/popup';\nimport { validatePackage } from '@progress/kendo-react-common';\nimport { packageMetadata } from '../package-metadata';\n/**\n * Represents the [KendoReact DropDownButton component]({% slug overview_dropdownbutton %}).\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *    render() {\n *        return (\n *            <DropDownButton text=\"Act\">\n *                <DropDownButtonItem text=\"Item1\" />\n *                <DropDownButtonItem text=\"Item2\" />\n *                <DropDownButtonItem text=\"Item3\" />\n *            </DropDownButton>\n *        );\n *    }\n * }\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nvar DropDownButton = /** @class */function (_super) {\n  __extends(DropDownButton, _super);\n  function DropDownButton(props) {\n    var _this = _super.call(this, props) || this;\n    /**\n     * @hidden\n     */\n    _this.state = {\n      opened: false,\n      focused: false,\n      focusedIndex: -1\n    };\n    _this.wrapper = null;\n    _this.mainButton = null;\n    _this.list = null;\n    _this.skipFocus = false;\n    _this.guid = guid();\n    _this.buttonsData = [];\n    _this.onKeyDown = function (event) {\n      var focusedIndex = _this.state.focusedIndex;\n      if (event.altKey) {\n        if (!_this.opened && event.keyCode === Keys.down) {\n          _this.dispatchPopupEvent(event, true);\n          _this.setState({\n            focusedIndex: 0,\n            opened: true\n          });\n        } else if (_this.opened && event.keyCode === Keys.up) {\n          _this.dispatchPopupEvent(event, false);\n          _this.setState({\n            focusedIndex: -1,\n            opened: false\n          });\n        }\n        return;\n      }\n      var newState = __assign({}, _this.state);\n      if (event.keyCode === Keys.enter || event.keyCode === Keys.space) {\n        if (focusedIndex >= 0) {\n          _this.dispatchClickEvent(event, focusedIndex);\n        }\n        // Prevent default because otherwise when an item is selected\n        // click on the default button gets emitted which opens the popup again.\n        event.preventDefault();\n        newState.focusedIndex = _this.opened ? -1 : 0, newState.opened = !_this.opened;\n        _this.dispatchPopupEvent(event, newState.opened);\n      } else if (_this.opened && event.keyCode === Keys.esc) {\n        newState.focusedIndex = -1;\n        newState.opened = false;\n        _this.dispatchPopupEvent(event, newState.opened);\n      }\n      if (_this.opened) {\n        var newFocused = navigation(focusedIndex, event.keyCode, event.altKey, _this.buttonsData.length);\n        newState.focusedIndex = newFocused;\n        var arrowKey = event.keyCode === Keys.up || event.keyCode === Keys.down || event.keyCode === Keys.left || event.keyCode === Keys.right;\n        if (!event.altKey && (arrowKey || event.keyCode === Keys.home || event.keyCode === Keys.end)) {\n          // Needed to notify the parent listeners that event is handled.\n          event.preventDefault();\n        }\n      }\n      _this.setState(newState);\n    };\n    _this.switchFocus = function (focusFn) {\n      _this.skipFocus = true;\n      focusFn();\n      window.setTimeout(function () {\n        return _this.skipFocus = false;\n      }, 0);\n    };\n    _this.handleFocus = function (event) {\n      if (_this.skipFocus) {\n        return;\n      }\n      _this.setState({\n        focused: true,\n        focusedIndex: _this.opened ? 0 : -1\n      });\n      dispatchEvent(_this.props.onFocus, event, _this, undefined);\n    };\n    _this.handleBlur = function (event) {\n      if (_this.skipFocus) {\n        return;\n      }\n      _this.setState({\n        focused: false,\n        opened: false,\n        focusedIndex: -1\n      });\n      dispatchEvent(_this.props.onBlur, event, _this, undefined);\n      var fireCloseEvent = _this.opened;\n      if (fireCloseEvent) {\n        _this.dispatchPopupEvent(event, false);\n      }\n    };\n    _this.onItemClick = function (event, clickedItemIndex) {\n      _this.setState({\n        focusedIndex: -1,\n        opened: false\n      });\n      _this.dispatchClickEvent(event, clickedItemIndex);\n      _this.dispatchPopupEvent(event, false);\n    };\n    _this.onItemDown = function (event) {\n      if (document.activeElement === _this.list) {\n        event.preventDefault();\n      }\n    };\n    _this.mouseDown = function (event) {\n      event.preventDefault();\n      if (_this.element && document.activeElement !== _this.element && document.activeElement !== _this.list) {\n        _this.element.focus();\n      }\n    };\n    _this.onPopupClose = function () {\n      if (_this.state.focused) {\n        _this.switchFocus(function () {\n          if (_this.element) {\n            _this.element.removeAttribute('tabindex');\n            _this.element.focus({\n              preventScroll: true\n            });\n          }\n        });\n      }\n    };\n    _this.listRef = function (list) {\n      _this.list = list;\n      if (list && _this.state.focused) {\n        _this.switchFocus(function () {\n          list.focus({\n            preventScroll: true\n          });\n          if (_this.element) {\n            _this.element.tabIndex = -1;\n          }\n        });\n      }\n    };\n    _this.onClickMainButton = function (event) {\n      if (!_this.buttonsData.length) {\n        return;\n      }\n      var toOpen = !_this.opened;\n      _this.setState({\n        opened: toOpen,\n        focused: true,\n        focusedIndex: toOpen ? 0 : -1\n      });\n      _this.dispatchPopupEvent(event, toOpen);\n    };\n    _this.dispatchPopupEvent = function (dispatchedEvent, open) {\n      dispatchEvent(open ? _this.props.onOpen : _this.props.onClose, dispatchedEvent, _this, undefined);\n    };\n    validatePackage(packageMetadata);\n    return _this;\n  }\n  Object.defineProperty(DropDownButton.prototype, \"opened\", {\n    get: function get() {\n      return this.props.opened === undefined ? this.state.opened : this.props.opened;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n  DropDownButton.prototype.render = function () {\n    var _this = this;\n    var rtl = this.isRtl();\n    var dir = rtl ? 'rtl' : undefined;\n    var _a = this.props,\n      id = _a.id,\n      style = _a.style,\n      tabIndex = _a.tabIndex,\n      disabled = _a.disabled;\n    this.buttonsData = this.props.items || React.Children.toArray(this.props.children).filter(function (child) {\n      return child && child.type === DropDownButtonItem;\n    }).map(function (child) {\n      return child.props;\n    });\n    return React.createElement(\"div\", {\n      id: id,\n      style: style,\n      className: classNames('k-dropdown-button', {\n        'k-focus': this.state.focused\n      }, this.props.className),\n      onKeyDown: this.onKeyDown,\n      onFocus: this.handleFocus,\n      onBlur: this.handleBlur,\n      dir: dir,\n      ref: function ref(el) {\n        return _this.wrapper = el;\n      }\n    }, React.createElement(Button, {\n      size: this.props.size,\n      shape: this.props.shape,\n      rounded: this.props.rounded,\n      fillMode: this.props.fillMode,\n      themeColor: this.props.themeColor,\n      onClick: this.onClickMainButton,\n      onMouseDown: this.mouseDown,\n      disabled: disabled || undefined,\n      tabIndex: tabIndex,\n      accessKey: this.props.accessKey,\n      icon: this.props.icon,\n      iconClass: this.props.iconClass,\n      className: this.props.buttonClass,\n      imageUrl: this.props.imageUrl,\n      dir: dir,\n      ref: function ref(btn) {\n        return _this.mainButton = btn && btn.element;\n      },\n      type: \"button\",\n      \"aria-haspopup\": true,\n      \"aria-expanded\": this.opened || undefined,\n      \"aria-label\": this.props.ariaLabel,\n      \"aria-controls\": this.opened ? this.guid : undefined,\n      id: 'button-' + this.guid,\n      title: this.props.title\n    }, this.props.text), this.renderPopup(rtl));\n  };\n  /**\n   * @hidden\n   */\n  DropDownButton.prototype.componentDidMount = function () {\n    // If this.props.opened is true during the initial render, the popup is not aligned.\n    if (this.props.dir === undefined && this.isRtl() || this.opened) {\n      this.forceUpdate();\n    }\n  };\n  Object.defineProperty(DropDownButton.prototype, \"element\", {\n    /**\n     * The DOM element of main button.\n     */\n    get: function get() {\n      return this.mainButton;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  DropDownButton.prototype.dispatchClickEvent = function (dispatchedEvent, index) {\n    if (!this.isItemDisabled(index)) {\n      dispatchEvent(this.props.onItemClick, dispatchedEvent, this, {\n        item: this.buttonsData[index],\n        itemIndex: index\n      });\n    }\n  };\n  DropDownButton.prototype.renderPopup = function (rtl) {\n    var _a;\n    var _b = this.props.popupSettings,\n      popupSettings = _b === void 0 ? {} : _b;\n    var focusedIndex = this.state.focusedIndex;\n    return React.createElement(Popup, {\n      anchor: this.wrapper,\n      show: this.opened,\n      animate: popupSettings.animate,\n      popupClass: classNames('k-menu-popup', popupSettings.popupClass),\n      anchorAlign: popupSettings.anchorAlign || getAnchorAlign(rtl),\n      popupAlign: popupSettings.popupAlign || getPopupAlign(rtl),\n      style: rtl ? {\n        direction: 'rtl'\n      } : undefined,\n      onClose: this.onPopupClose\n    }, React.createElement(\"ul\", {\n      role: \"menu\",\n      id: this.guid,\n      \"aria-labelledby\": 'button-' + this.guid,\n      tabIndex: -1,\n      \"aria-activedescendant\": focusedIndex >= 0 ? \"\".concat(this.guid, \"-\").concat(focusedIndex) : undefined,\n      ref: this.listRef,\n      className: classNames('k-group k-menu-group k-reset', (_a = {}, _a[\"k-menu-group-\".concat(kendoThemeMaps.sizeMap[this.props.size] || this.props.size)] = this.props.size, _a))\n    }, this.renderChildItems()));\n  };\n  DropDownButton.prototype.renderChildItems = function () {\n    var _this = this;\n    var _a = this.props,\n      item = _a.item,\n      itemRender = _a.itemRender,\n      textField = _a.textField;\n    return this.buttonsData.length > 0 ? this.buttonsData.map(function (dataItem, index) {\n      return React.createElement(ButtonItem, {\n        className: \"k-menu-item\",\n        dataItem: dataItem,\n        textField: textField,\n        focused: _this.state.focusedIndex === index,\n        onClick: _this.onItemClick,\n        onDown: _this.onItemDown,\n        render: itemRender,\n        item: item,\n        index: index,\n        key: index,\n        id: \"\".concat(_this.guid, \"-\").concat(index)\n      });\n    }) : null;\n  };\n  DropDownButton.prototype.isItemDisabled = function (index) {\n    return this.buttonsData[index] ? this.buttonsData[index].disabled : this.props.disabled;\n  };\n  DropDownButton.prototype.isRtl = function () {\n    return this.props.dir !== undefined ? this.props.dir === 'rtl' : !!this.wrapper && getComputedStyle(this.wrapper).direction === 'rtl';\n  };\n  /**\n   * @hidden\n   */\n  DropDownButton.propTypes = {\n    accessKey: PropTypes.string,\n    ariaLabel: PropTypes.string,\n    title: PropTypes.string,\n    onFocus: PropTypes.func,\n    onBlur: PropTypes.func,\n    onItemClick: PropTypes.func,\n    onOpen: PropTypes.func,\n    onClose: PropTypes.func,\n    items: PropTypes.arrayOf(PropTypes.any),\n    textField: PropTypes.string,\n    tabIndex: PropTypes.number,\n    disabled: PropTypes.bool,\n    icon: PropTypes.string,\n    iconClass: PropTypes.string,\n    imageUrl: PropTypes.string,\n    popupSettings: PropTypes.object,\n    itemRender: PropTypes.func,\n    item: PropTypes.func,\n    className: PropTypes.string,\n    buttonClass: PropTypes.string,\n    dir: PropTypes.string\n  };\n  /**\n   * @hidden\n   */\n  DropDownButton.defaultProps = {\n    size: 'medium',\n    rounded: 'medium',\n    shape: null,\n    fillMode: 'solid',\n    themeColor: 'base'\n  };\n  return DropDownButton;\n}(React.Component);\nexport { DropDownButton };","map":null,"metadata":{},"sourceType":"module"}