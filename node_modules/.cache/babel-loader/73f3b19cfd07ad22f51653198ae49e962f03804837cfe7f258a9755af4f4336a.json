{"ast":null,"code":"import { isMap, isPair, isScalar } from '../../nodes/Node.js';\nimport { createPair, Pair } from '../../nodes/Pair.js';\nimport { YAMLMap, findPair } from '../../nodes/YAMLMap.js';\nclass YAMLSet extends YAMLMap {\n  constructor(schema) {\n    super(schema);\n    this.tag = YAMLSet.tag;\n  }\n  add(key) {\n    let pair;\n    if (isPair(key)) pair = key;else if (key && typeof key === 'object' && 'key' in key && 'value' in key && key.value === null) pair = new Pair(key.key, null);else pair = new Pair(key, null);\n    const prev = findPair(this.items, pair.key);\n    if (!prev) this.items.push(pair);\n  }\n  /**\n   * If `keepPair` is `true`, returns the Pair matching `key`.\n   * Otherwise, returns the value of that Pair's key.\n   */\n  get(key, keepPair) {\n    const pair = findPair(this.items, key);\n    return !keepPair && isPair(pair) ? isScalar(pair.key) ? pair.key.value : pair.key : pair;\n  }\n  set(key, value) {\n    if (typeof value !== 'boolean') throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`);\n    const prev = findPair(this.items, key);\n    if (prev && !value) {\n      this.items.splice(this.items.indexOf(prev), 1);\n    } else if (!prev && value) {\n      this.items.push(new Pair(key));\n    }\n  }\n  toJSON(_, ctx) {\n    return super.toJSON(_, ctx, Set);\n  }\n  toString(ctx, onComment, onChompKeep) {\n    if (!ctx) return JSON.stringify(this);\n    if (this.hasAllNullValues(true)) return super.toString(Object.assign({}, ctx, {\n      allNullValues: true\n    }), onComment, onChompKeep);else throw new Error('Set items must all have null values');\n  }\n}\nYAMLSet.tag = 'tag:yaml.org,2002:set';\nconst set = {\n  collection: 'map',\n  identify: value => value instanceof Set,\n  nodeClass: YAMLSet,\n  default: false,\n  tag: 'tag:yaml.org,2002:set',\n  resolve(map, onError) {\n    if (isMap(map)) {\n      if (map.hasAllNullValues(true)) return Object.assign(new YAMLSet(), map);else onError('Set items must all have null values');\n    } else onError('Expected a mapping for this tag');\n    return map;\n  },\n  createNode(schema, iterable, ctx) {\n    const {\n      replacer\n    } = ctx;\n    const set = new YAMLSet(schema);\n    if (iterable && Symbol.iterator in Object(iterable)) for (let value of iterable) {\n      if (typeof replacer === 'function') value = replacer.call(iterable, value, value);\n      set.items.push(createPair(value, null, ctx));\n    }\n    return set;\n  }\n};\nexport { YAMLSet, set };","map":{"version":3,"names":["isMap","isPair","isScalar","createPair","Pair","YAMLMap","findPair","YAMLSet","constructor","schema","tag","add","key","pair","value","prev","items","push","get","keepPair","set","Error","splice","indexOf","toJSON","_","ctx","Set","toString","onComment","onChompKeep","JSON","stringify","hasAllNullValues","Object","assign","allNullValues","collection","identify","nodeClass","default","resolve","map","onError","createNode","iterable","replacer","Symbol","iterator","call"],"sources":["/Users/jhazzatgmail.com/Documents/moorseapp/node_modules/yaml/browser/dist/schema/yaml-1.1/set.js"],"sourcesContent":["import { isMap, isPair, isScalar } from '../../nodes/Node.js';\nimport { createPair, Pair } from '../../nodes/Pair.js';\nimport { YAMLMap, findPair } from '../../nodes/YAMLMap.js';\n\nclass YAMLSet extends YAMLMap {\n    constructor(schema) {\n        super(schema);\n        this.tag = YAMLSet.tag;\n    }\n    add(key) {\n        let pair;\n        if (isPair(key))\n            pair = key;\n        else if (key &&\n            typeof key === 'object' &&\n            'key' in key &&\n            'value' in key &&\n            key.value === null)\n            pair = new Pair(key.key, null);\n        else\n            pair = new Pair(key, null);\n        const prev = findPair(this.items, pair.key);\n        if (!prev)\n            this.items.push(pair);\n    }\n    /**\n     * If `keepPair` is `true`, returns the Pair matching `key`.\n     * Otherwise, returns the value of that Pair's key.\n     */\n    get(key, keepPair) {\n        const pair = findPair(this.items, key);\n        return !keepPair && isPair(pair)\n            ? isScalar(pair.key)\n                ? pair.key.value\n                : pair.key\n            : pair;\n    }\n    set(key, value) {\n        if (typeof value !== 'boolean')\n            throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`);\n        const prev = findPair(this.items, key);\n        if (prev && !value) {\n            this.items.splice(this.items.indexOf(prev), 1);\n        }\n        else if (!prev && value) {\n            this.items.push(new Pair(key));\n        }\n    }\n    toJSON(_, ctx) {\n        return super.toJSON(_, ctx, Set);\n    }\n    toString(ctx, onComment, onChompKeep) {\n        if (!ctx)\n            return JSON.stringify(this);\n        if (this.hasAllNullValues(true))\n            return super.toString(Object.assign({}, ctx, { allNullValues: true }), onComment, onChompKeep);\n        else\n            throw new Error('Set items must all have null values');\n    }\n}\nYAMLSet.tag = 'tag:yaml.org,2002:set';\nconst set = {\n    collection: 'map',\n    identify: value => value instanceof Set,\n    nodeClass: YAMLSet,\n    default: false,\n    tag: 'tag:yaml.org,2002:set',\n    resolve(map, onError) {\n        if (isMap(map)) {\n            if (map.hasAllNullValues(true))\n                return Object.assign(new YAMLSet(), map);\n            else\n                onError('Set items must all have null values');\n        }\n        else\n            onError('Expected a mapping for this tag');\n        return map;\n    },\n    createNode(schema, iterable, ctx) {\n        const { replacer } = ctx;\n        const set = new YAMLSet(schema);\n        if (iterable && Symbol.iterator in Object(iterable))\n            for (let value of iterable) {\n                if (typeof replacer === 'function')\n                    value = replacer.call(iterable, value, value);\n                set.items.push(createPair(value, null, ctx));\n            }\n        return set;\n    }\n};\n\nexport { YAMLSet, set };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}