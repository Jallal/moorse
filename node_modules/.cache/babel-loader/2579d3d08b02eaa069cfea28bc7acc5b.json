{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from '../package-metadata';\nimport { classNames, guid } from '@progress/kendo-react-common';\n/**\n * Represents the [KendoReact GridLayout component]({% slug overview_gridlayout %}).\n * Arranges the contents of the component in rows and columns in a grid structure.\n *\n * @example\n * ```jsx\n *\n * const App = () => {\n *   return (\n *     <GridLayout\n *       rows={[{height: 50}, {height: 50}, {height: 50}]}\n *       cols={[{width: 50}, {width: 50}, {width: 50}]}\n *       gap={{rows: 5, cols: 5}}\n *       align={{horizontal: 'stretch', vertical: 'stretch'}}\n *     >\n *       <GridLayoutItem row={1} col={1}>Box</GridLayoutItem>\n *       <GridLayoutItem row={1} col={2} colSpan={2}>Box</GridLayoutItem>\n *       <GridLayoutItem row={2} col={1} colSpan={2} rowSpan={2}>Box</GridLayoutItem>\n *       <GridLayoutItem row={2} col={3}>Box</GridLayoutItem>\n *       <GridLayoutItem row={3} col={3}>Box</GridLayoutItem>\n *     </GridLayout>\n *   );\n * };\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nexport var GridLayout = React.forwardRef(function (props, ref) {\n  validatePackage(packageMetadata);\n  var elementRef = React.useRef(null);\n  var getImperativeHandle = React.useCallback(function () {\n    return {\n      element: elementRef.current\n    };\n  }, []);\n  React.useImperativeHandle(ref, getImperativeHandle);\n  var className = props.className,\n    style = props.style,\n    id = props.id,\n    children = props.children,\n    gap = props.gap;\n  var layoutId = React.useMemo(function () {\n    return guid();\n  }, []);\n  var hAlign = React.useMemo(function () {\n    return props.align && props.align.horizontal ? props.align.horizontal : defaultProps.hAlign;\n  }, [props.align]);\n  var vAlign = React.useMemo(function () {\n    return props.align && props.align.vertical ? props.align.vertical : defaultProps.vAlign;\n  }, [props.align]);\n  var gridLayoutClasses = React.useMemo(function () {\n    return classNames('k-grid-layout', {\n      'k-justify-items-start': hAlign === 'start',\n      'k-justify-items-center': hAlign === 'center',\n      'k-justify-items-end': hAlign === 'end',\n      'k-justify-items-stretch': hAlign === 'stretch',\n      'k-align-items-start': vAlign === 'top',\n      'k-align-items-center': vAlign === 'middle',\n      'k-align-items-end': vAlign === 'bottom',\n      'k-align-items-stretch': vAlign === 'stretch'\n    }, className);\n  }, [hAlign, vAlign, className]);\n  var gapStyle = gap ? \"\".concat(typeof gap.rows === 'number' ? gap.rows + 'px' : gap.rows) + ' ' + \"\".concat(typeof gap.cols === 'number' ? gap.cols + 'px' : gap.cols) : undefined;\n  var gridTemplateRowsStyle = props.rows && props.rows.map(function (row) {\n    return \"\".concat(typeof row.height === 'number' ? row.height + 'px' : row.height);\n  }).join(' ');\n  var gridTemplateColumnsStyle = props.cols && props.cols.map(function (col) {\n    return \"\".concat(typeof col.width === 'number' ? col.width + 'px' : col.width);\n  }).join(' ');\n  var gridLayoutStyles = __assign({\n    gap: gapStyle,\n    gridTemplateColumns: gridTemplateColumnsStyle,\n    gridTemplateRows: gridTemplateRowsStyle\n  }, style);\n  return React.createElement(\"div\", {\n    ref: elementRef,\n    className: gridLayoutClasses,\n    style: gridLayoutStyles,\n    id: id || layoutId\n  }, children);\n});\nvar defaultProps = {\n  hAlign: 'stretch',\n  vAlign: 'stretch',\n  gap: undefined\n};\nGridLayout.propTypes = {\n  className: PropTypes.string,\n  style: PropTypes.object,\n  children: PropTypes.any,\n  id: PropTypes.string,\n  gap: PropTypes.shape({\n    rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    columns: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n  }),\n  align: PropTypes.shape({\n    vertical: PropTypes.oneOf(['top', 'middle', 'bottom', 'stretch']),\n    horizontal: PropTypes.oneOf(['start', 'center', 'end', 'stretch'])\n  })\n};\nGridLayout.defaultProps = defaultProps;\nGridLayout.displayName = 'KendoReactGridLayout';","map":null,"metadata":{},"sourceType":"module"}