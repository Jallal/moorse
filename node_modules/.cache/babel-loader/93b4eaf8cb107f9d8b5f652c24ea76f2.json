{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames } from '@progress/kendo-react-common';\nimport { validatePackage } from '@progress/kendo-react-common';\nimport { packageMetadata } from './package-metadata';\nimport util from './util';\nvar styles = util.styles;\nvar ButtonGroup = /** @class */function (_super) {\n  __extends(ButtonGroup, _super);\n  function ButtonGroup(props) {\n    var _this = _super.call(this, props) || this;\n    _this._element = null;\n    validatePackage(packageMetadata);\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n  ButtonGroup.prototype.render = function () {\n    var _a;\n    var _this = this;\n    var buttons = this.mapButtons(this.props.children);\n    var groupClasses = classNames([styles['button-group']], (_a = {}, _a['k-disabled'] = this.props.disabled, _a[styles['button-group-stretched']] = !!this.props.width, _a), this.props.className);\n    var groupProps = {\n      className: groupClasses,\n      style: {\n        'width': \"\".concat(this.props.width)\n      },\n      dir: this.props.dir,\n      // Accessibility properties\n      role: 'group',\n      'aria-disabled': this.props.disabled\n    };\n    return React.createElement(\"div\", __assign({\n      ref: function ref(div) {\n        _this._element = div;\n      }\n    }, groupProps, {\n      className: groupClasses\n    }), buttons);\n  };\n  ButtonGroup.prototype.mapButtons = function (children) {\n    var _this = this;\n    var count = React.Children.count(children);\n    var rtl = this.props.dir !== undefined ? this.props.dir === 'rtl' : this._element && getComputedStyle(this._element).direction === 'rtl' || false;\n    return React.Children.map(children, function (child, index) {\n      if (React.isValidElement(child)) {\n        return _this.renderButton(child, index, index === count - 1, rtl);\n      }\n      return child;\n    });\n  };\n  ButtonGroup.prototype.renderButton = function (child, index, isLast, isRtl) {\n    var _a;\n    var className = classNames(child.props.className, (_a = {}, _a[styles['group-start']] = isRtl ? isLast : index === 0, _a[styles['group-end']] = isRtl ? index === 0 : isLast, _a));\n    var style = __assign(__assign({}, this.props.width ? {\n      width: this.props.width\n    } : {}), child.props.style || {});\n    var disabled = this.props.disabled || child.props.disabled;\n    var buttonProps = __assign(__assign(__assign(__assign({}, child.props), className ? {\n      className: className\n    } : {}), Object.keys(style).length ? {\n      style: style\n    } : {}), disabled !== undefined ? {\n      disabled: disabled\n    } : {});\n    return React.Children.count(child.props.children) > 0 ? React.cloneElement(child, buttonProps, child.props.children) : React.cloneElement(child, buttonProps);\n  };\n  /**\n   * @hidden\n   */\n  ButtonGroup.propTypes = {\n    children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.element), PropTypes.element]),\n    className: PropTypes.string,\n    disabled: PropTypes.bool,\n    width: PropTypes.string,\n    dir: PropTypes.string\n  };\n  return ButtonGroup;\n}(React.Component);\nexport { ButtonGroup };","map":null,"metadata":{},"sourceType":"module"}