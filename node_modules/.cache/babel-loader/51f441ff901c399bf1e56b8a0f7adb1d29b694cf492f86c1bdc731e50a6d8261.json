{"ast":null,"code":"var rx_escapable = /[\\\\\\\"\\u0000-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\nvar gap,\n  indent,\n  meta = {\n    // table of character substitutions\n    '\\b': '\\\\b',\n    '\\t': '\\\\t',\n    '\\n': '\\\\n',\n    '\\f': '\\\\f',\n    '\\r': '\\\\r',\n    '\"': '\\\\\"',\n    '\\\\': '\\\\\\\\'\n  },\n  rep;\nfunction quote(string) {\n  // If the string contains no control characters, no quote characters, and no\n  // backslash characters, then we can safely slap some quotes around it.\n  // Otherwise we must also replace the offending characters with safe escape\n  // sequences.\n\n  rx_escapable.lastIndex = 0;\n  return rx_escapable.test(string) ? '\"' + string.replace(rx_escapable, function (a) {\n    var c = meta[a];\n    return typeof c === 'string' ? c : '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n  }) + '\"' : '\"' + string + '\"';\n}\nfunction str(key, holder, limit) {\n  // Produce a string from holder[key].\n\n  var i,\n    // The loop counter.\n    k,\n    // The member key.\n    v,\n    // The member value.\n    length,\n    mind = gap,\n    partial,\n    value = holder[key];\n\n  // If the value has a toJSON method, call it to obtain a replacement value.\n\n  if (value && typeof value === 'object' && typeof value.toJSON === 'function') {\n    value = value.toJSON(key);\n  }\n\n  // If we were called with a replacer function, then call the replacer to\n  // obtain a replacement value.\n\n  if (typeof rep === 'function') {\n    value = rep.call(holder, key, value);\n  }\n\n  // What happens next depends on the value's type.\n\n  switch (typeof value) {\n    case 'string':\n      return quote(value);\n    case 'number':\n      // JSON numbers must be finite. Encode non-finite numbers as null.\n\n      return isFinite(value) ? String(value) : 'null';\n    case 'boolean':\n    case 'null':\n      // If the value is a boolean or null, convert it to a string. Note:\n      // typeof null does not produce 'null'. The case is included here in\n      // the remote chance that this gets fixed someday.\n\n      return String(value);\n\n    // If the type is 'object', we might be dealing with an object or an array or\n    // null.\n\n    case 'object':\n      // Due to a specification blunder in ECMAScript, typeof null is 'object',\n      // so watch out for that case.\n\n      if (!value) {\n        return 'null';\n      }\n\n      // Make an array to hold the partial results of stringifying this object value.\n\n      gap += indent;\n      partial = [];\n\n      // Is the value an array?\n\n      if (Object.prototype.toString.apply(value) === '[object Array]') {\n        // The value is an array. Stringify every element. Use null as a placeholder\n        // for non-JSON values.\n\n        length = value.length;\n        for (i = 0; i < length; i += 1) {\n          partial[i] = str(i, value, limit) || 'null';\n        }\n\n        // Join all of the elements together, separated with commas, and wrap them in\n        // brackets.\n\n        v = partial.length === 0 ? '[]' : gap ? gap.length + partial.join(', ').length + 4 > limit ? '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' : '[ ' + partial.join(', ') + ' ]' : '[' + partial.join(',') + ']';\n        gap = mind;\n        return v;\n      }\n\n      // If the replacer is an array, use it to select the members to be stringified.\n\n      if (rep && typeof rep === 'object') {\n        length = rep.length;\n        for (i = 0; i < length; i += 1) {\n          if (typeof rep[i] === 'string') {\n            k = rep[i];\n            v = str(k, value, limit);\n            if (v) {\n              partial.push(quote(k) + (gap ? ': ' : ':') + v);\n            }\n          }\n        }\n      } else {\n        // Otherwise, iterate through all of the keys in the object.\n\n        for (k in value) {\n          if (Object.prototype.hasOwnProperty.call(value, k)) {\n            v = str(k, value, limit);\n            if (v) {\n              partial.push(quote(k) + (gap ? ': ' : ':') + v);\n            }\n          }\n        }\n      }\n\n      // Join all of the member texts together, separated with commas,\n      // and wrap them in braces.\n\n      v = partial.length === 0 ? '{}' : gap ? gap.length + partial.join(', ').length + 4 > limit ? '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' : '{ ' + partial.join(', ') + ' }' : '{' + partial.join(',') + '}';\n      gap = mind;\n      return v;\n  }\n}\nfunction beautify(value, replacer, space, limit) {\n  // The stringify method takes a value and an optional replacer, and an optional\n  // space parameter, and returns a JSON text. The replacer can be a function\n  // that can replace values, or an array of strings that will select the keys.\n  // A default replacer method can be provided. Use of the space parameter can\n  // produce text that is more easily readable.\n\n  var i;\n  gap = '';\n  indent = '';\n  if (!limit) limit = 0;\n  if (typeof limit !== \"number\") throw new Error(\"beaufifier: limit must be a number\");\n\n  // If the space parameter is a number, make an indent string containing that\n  // many spaces.\n\n  if (typeof space === 'number') {\n    for (i = 0; i < space; i += 1) {\n      indent += ' ';\n    }\n\n    // If the space parameter is a string, it will be used as the indent string.\n  } else if (typeof space === 'string') {\n    indent = space;\n  }\n\n  // If there is a replacer, it must be a function or an array.\n  // Otherwise, throw an error.\n\n  rep = replacer;\n  if (replacer && typeof replacer !== 'function' && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {\n    throw new Error('beautifier: wrong replacer parameter');\n  }\n\n  // Make a fake root object containing our value under the key of ''.\n  // Return the result of stringifying the value.\n\n  return str('', {\n    '': value\n  }, limit);\n}\nmodule.exports = beautify;","map":{"version":3,"names":["rx_escapable","gap","indent","meta","rep","quote","string","lastIndex","test","replace","a","c","charCodeAt","toString","slice","str","key","holder","limit","i","k","v","length","mind","partial","value","toJSON","call","isFinite","String","Object","prototype","apply","join","push","hasOwnProperty","beautify","replacer","space","Error","module","exports"],"sources":["/workspaces/moorse/node_modules/json-beautify/index.js"],"sourcesContent":["\nvar rx_escapable = /[\\\\\\\"\\u0000-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n\nvar gap,\n    indent,\n    meta = { // table of character substitutions\n      '\\b': '\\\\b',\n      '\\t': '\\\\t',\n      '\\n': '\\\\n',\n      '\\f': '\\\\f',\n      '\\r': '\\\\r',\n      '\"': '\\\\\"',\n      '\\\\': '\\\\\\\\'\n    },\n    rep;\n\nfunction quote(string) {\n\n// If the string contains no control characters, no quote characters, and no\n// backslash characters, then we can safely slap some quotes around it.\n// Otherwise we must also replace the offending characters with safe escape\n// sequences.\n\n    rx_escapable.lastIndex = 0;\n    return rx_escapable.test(string)\n        ? '\"' + string.replace(rx_escapable, function (a) {\n            var c = meta[a];\n            return typeof c === 'string'\n                ? c\n                : '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n        }) + '\"'\n        : '\"' + string + '\"';\n}\n\n\nfunction str(key, holder, limit) {\n\n// Produce a string from holder[key].\n\n    var i,          // The loop counter.\n        k,          // The member key.\n        v,          // The member value.\n        length,\n        mind = gap,\n        partial,\n        value = holder[key];\n\n// If the value has a toJSON method, call it to obtain a replacement value.\n\n    if (value && typeof value === 'object' &&\n            typeof value.toJSON === 'function') {\n        value = value.toJSON(key);\n    }\n\n// If we were called with a replacer function, then call the replacer to\n// obtain a replacement value.\n\n    if (typeof rep === 'function') {\n        value = rep.call(holder, key, value);\n    }\n\n// What happens next depends on the value's type.\n\n    switch (typeof value) {\n    case 'string':\n        return quote(value);\n\n    case 'number':\n\n// JSON numbers must be finite. Encode non-finite numbers as null.\n\n        return isFinite(value)\n            ? String(value)\n            : 'null';\n\n    case 'boolean':\n    case 'null':\n\n// If the value is a boolean or null, convert it to a string. Note:\n// typeof null does not produce 'null'. The case is included here in\n// the remote chance that this gets fixed someday.\n\n        return String(value);\n\n// If the type is 'object', we might be dealing with an object or an array or\n// null.\n\n    case 'object':\n\n// Due to a specification blunder in ECMAScript, typeof null is 'object',\n// so watch out for that case.\n\n        if (!value) {\n            return 'null';\n        }\n\n// Make an array to hold the partial results of stringifying this object value.\n\n        gap += indent;\n        partial = [];\n\n// Is the value an array?\n\n        if (Object.prototype.toString.apply(value) === '[object Array]') {\n\n// The value is an array. Stringify every element. Use null as a placeholder\n// for non-JSON values.\n\n            length = value.length;\n            for (i = 0; i < length; i += 1) {\n                partial[i] = str(i, value, limit) || 'null';\n            }\n\n// Join all of the elements together, separated with commas, and wrap them in\n// brackets.\n\n            v = partial.length === 0\n                ? '[]'\n                : gap\n                    ? (\n                      gap.length + partial.join(', ').length + 4 > limit ?\n                      '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n                      '[ ' + partial.join(', ') + ' ]'\n                    )\n                    : '[' + partial.join(',') + ']';\n            gap = mind;\n            return v;\n        }\n\n// If the replacer is an array, use it to select the members to be stringified.\n\n        if (rep && typeof rep === 'object') {\n            length = rep.length;\n            for (i = 0; i < length; i += 1) {\n                if (typeof rep[i] === 'string') {\n                    k = rep[i];\n                    v = str(k, value, limit);\n                    if (v) {\n                        partial.push(quote(k) + (\n                            gap\n                                ? ': '\n                                : ':'\n                        ) + v);\n                    }\n                }\n            }\n        } else {\n\n// Otherwise, iterate through all of the keys in the object.\n\n            for (k in value) {\n                if (Object.prototype.hasOwnProperty.call(value, k)) {\n                    v = str(k, value, limit);\n                    if (v) {\n                        partial.push(quote(k) + (\n                            gap\n                                ? ': '\n                                : ':'\n                        ) + v);\n                    }\n                }\n            }\n        }\n\n// Join all of the member texts together, separated with commas,\n// and wrap them in braces.\n\n        v = partial.length === 0\n            ? '{}'\n            : gap\n                ? (\n                  gap.length + partial.join(', ').length + 4 > limit ?\n                  '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n                  '{ ' + partial.join(', ') + ' }'\n                )\n                : '{' + partial.join(',') + '}';\n        gap = mind;\n        return v;\n    }\n}\n\n\nfunction beautify (value, replacer, space, limit) {\n\n// The stringify method takes a value and an optional replacer, and an optional\n// space parameter, and returns a JSON text. The replacer can be a function\n// that can replace values, or an array of strings that will select the keys.\n// A default replacer method can be provided. Use of the space parameter can\n// produce text that is more easily readable.\n\n  var i;\n  gap = '';\n  indent = '';\n\n  if (!limit) limit = 0;\n\n  if (typeof limit !== \"number\")\n    throw new Error(\"beaufifier: limit must be a number\");\n\n// If the space parameter is a number, make an indent string containing that\n// many spaces.\n\n  if (typeof space === 'number') {\n      for (i = 0; i < space; i += 1) {\n          indent += ' ';\n      }\n\n// If the space parameter is a string, it will be used as the indent string.\n\n  } else if (typeof space === 'string') {\n      indent = space;\n  }\n\n// If there is a replacer, it must be a function or an array.\n// Otherwise, throw an error.\n\n  rep = replacer;\n  if (replacer && typeof replacer !== 'function' &&\n          (typeof replacer !== 'object' ||\n          typeof replacer.length !== 'number')) {\n      throw new Error('beautifier: wrong replacer parameter');\n  }\n\n// Make a fake root object containing our value under the key of ''.\n// Return the result of stringifying the value.\n\n  return str('', {'': value}, limit);\n}\n\nmodule.exports = beautify;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}