{"ast":null,"code":"import { stringifyCollection } from '../stringify/stringifyCollection.js';\nimport { addPairToJSMap } from './addPairToJSMap.js';\nimport { Collection } from './Collection.js';\nimport { isPair, isScalar, MAP } from './Node.js';\nimport { Pair } from './Pair.js';\nimport { isScalarValue } from './Scalar.js';\nfunction findPair(items, key) {\n  const k = isScalar(key) ? key.value : key;\n  for (const it of items) {\n    if (isPair(it)) {\n      if (it.key === key || it.key === k) return it;\n      if (isScalar(it.key) && it.key.value === k) return it;\n    }\n  }\n  return undefined;\n}\nclass YAMLMap extends Collection {\n  static get tagName() {\n    return 'tag:yaml.org,2002:map';\n  }\n  constructor(schema) {\n    super(MAP, schema);\n    this.items = [];\n  }\n  /**\n   * Adds a value to the collection.\n   *\n   * @param overwrite - If not set `true`, using a key that is already in the\n   *   collection will throw. Otherwise, overwrites the previous value.\n   */\n  add(pair, overwrite) {\n    let _pair;\n    if (isPair(pair)) _pair = pair;else if (!pair || typeof pair !== 'object' || !('key' in pair)) {\n      // In TypeScript, this never happens.\n      _pair = new Pair(pair, pair?.value);\n    } else _pair = new Pair(pair.key, pair.value);\n    const prev = findPair(this.items, _pair.key);\n    const sortEntries = this.schema?.sortMapEntries;\n    if (prev) {\n      if (!overwrite) throw new Error(`Key ${_pair.key} already set`);\n      // For scalars, keep the old node & its comments and anchors\n      if (isScalar(prev.value) && isScalarValue(_pair.value)) prev.value.value = _pair.value;else prev.value = _pair.value;\n    } else if (sortEntries) {\n      const i = this.items.findIndex(item => sortEntries(_pair, item) < 0);\n      if (i === -1) this.items.push(_pair);else this.items.splice(i, 0, _pair);\n    } else {\n      this.items.push(_pair);\n    }\n  }\n  delete(key) {\n    const it = findPair(this.items, key);\n    if (!it) return false;\n    const del = this.items.splice(this.items.indexOf(it), 1);\n    return del.length > 0;\n  }\n  get(key, keepScalar) {\n    const it = findPair(this.items, key);\n    const node = it?.value;\n    return (!keepScalar && isScalar(node) ? node.value : node) ?? undefined;\n  }\n  has(key) {\n    return !!findPair(this.items, key);\n  }\n  set(key, value) {\n    this.add(new Pair(key, value), true);\n  }\n  /**\n   * @param ctx - Conversion context, originally set in Document#toJS()\n   * @param {Class} Type - If set, forces the returned collection type\n   * @returns Instance of Type, Map, or Object\n   */\n  toJSON(_, ctx, Type) {\n    const map = Type ? new Type() : ctx?.mapAsMap ? new Map() : {};\n    if (ctx?.onCreate) ctx.onCreate(map);\n    for (const item of this.items) addPairToJSMap(ctx, map, item);\n    return map;\n  }\n  toString(ctx, onComment, onChompKeep) {\n    if (!ctx) return JSON.stringify(this);\n    for (const item of this.items) {\n      if (!isPair(item)) throw new Error(`Map items must all be pairs; found ${JSON.stringify(item)} instead`);\n    }\n    if (!ctx.allNullValues && this.hasAllNullValues(false)) ctx = Object.assign({}, ctx, {\n      allNullValues: true\n    });\n    return stringifyCollection(this, ctx, {\n      blockItemPrefix: '',\n      flowChars: {\n        start: '{',\n        end: '}'\n      },\n      itemIndent: ctx.indent || '',\n      onChompKeep,\n      onComment\n    });\n  }\n}\nexport { YAMLMap, findPair };","map":{"version":3,"names":["stringifyCollection","addPairToJSMap","Collection","isPair","isScalar","MAP","Pair","isScalarValue","findPair","items","key","k","value","it","undefined","YAMLMap","tagName","constructor","schema","add","pair","overwrite","_pair","prev","sortEntries","sortMapEntries","Error","i","findIndex","item","push","splice","delete","del","indexOf","length","get","keepScalar","node","has","set","toJSON","_","ctx","Type","map","mapAsMap","Map","onCreate","toString","onComment","onChompKeep","JSON","stringify","allNullValues","hasAllNullValues","Object","assign","blockItemPrefix","flowChars","start","end","itemIndent","indent"],"sources":["/Users/jhazzatgmail.com/Documents/moorseapp/node_modules/yaml/browser/dist/nodes/YAMLMap.js"],"sourcesContent":["import { stringifyCollection } from '../stringify/stringifyCollection.js';\nimport { addPairToJSMap } from './addPairToJSMap.js';\nimport { Collection } from './Collection.js';\nimport { isPair, isScalar, MAP } from './Node.js';\nimport { Pair } from './Pair.js';\nimport { isScalarValue } from './Scalar.js';\n\nfunction findPair(items, key) {\n    const k = isScalar(key) ? key.value : key;\n    for (const it of items) {\n        if (isPair(it)) {\n            if (it.key === key || it.key === k)\n                return it;\n            if (isScalar(it.key) && it.key.value === k)\n                return it;\n        }\n    }\n    return undefined;\n}\nclass YAMLMap extends Collection {\n    static get tagName() {\n        return 'tag:yaml.org,2002:map';\n    }\n    constructor(schema) {\n        super(MAP, schema);\n        this.items = [];\n    }\n    /**\n     * Adds a value to the collection.\n     *\n     * @param overwrite - If not set `true`, using a key that is already in the\n     *   collection will throw. Otherwise, overwrites the previous value.\n     */\n    add(pair, overwrite) {\n        let _pair;\n        if (isPair(pair))\n            _pair = pair;\n        else if (!pair || typeof pair !== 'object' || !('key' in pair)) {\n            // In TypeScript, this never happens.\n            _pair = new Pair(pair, pair?.value);\n        }\n        else\n            _pair = new Pair(pair.key, pair.value);\n        const prev = findPair(this.items, _pair.key);\n        const sortEntries = this.schema?.sortMapEntries;\n        if (prev) {\n            if (!overwrite)\n                throw new Error(`Key ${_pair.key} already set`);\n            // For scalars, keep the old node & its comments and anchors\n            if (isScalar(prev.value) && isScalarValue(_pair.value))\n                prev.value.value = _pair.value;\n            else\n                prev.value = _pair.value;\n        }\n        else if (sortEntries) {\n            const i = this.items.findIndex(item => sortEntries(_pair, item) < 0);\n            if (i === -1)\n                this.items.push(_pair);\n            else\n                this.items.splice(i, 0, _pair);\n        }\n        else {\n            this.items.push(_pair);\n        }\n    }\n    delete(key) {\n        const it = findPair(this.items, key);\n        if (!it)\n            return false;\n        const del = this.items.splice(this.items.indexOf(it), 1);\n        return del.length > 0;\n    }\n    get(key, keepScalar) {\n        const it = findPair(this.items, key);\n        const node = it?.value;\n        return (!keepScalar && isScalar(node) ? node.value : node) ?? undefined;\n    }\n    has(key) {\n        return !!findPair(this.items, key);\n    }\n    set(key, value) {\n        this.add(new Pair(key, value), true);\n    }\n    /**\n     * @param ctx - Conversion context, originally set in Document#toJS()\n     * @param {Class} Type - If set, forces the returned collection type\n     * @returns Instance of Type, Map, or Object\n     */\n    toJSON(_, ctx, Type) {\n        const map = Type ? new Type() : ctx?.mapAsMap ? new Map() : {};\n        if (ctx?.onCreate)\n            ctx.onCreate(map);\n        for (const item of this.items)\n            addPairToJSMap(ctx, map, item);\n        return map;\n    }\n    toString(ctx, onComment, onChompKeep) {\n        if (!ctx)\n            return JSON.stringify(this);\n        for (const item of this.items) {\n            if (!isPair(item))\n                throw new Error(`Map items must all be pairs; found ${JSON.stringify(item)} instead`);\n        }\n        if (!ctx.allNullValues && this.hasAllNullValues(false))\n            ctx = Object.assign({}, ctx, { allNullValues: true });\n        return stringifyCollection(this, ctx, {\n            blockItemPrefix: '',\n            flowChars: { start: '{', end: '}' },\n            itemIndent: ctx.indent || '',\n            onChompKeep,\n            onComment\n        });\n    }\n}\n\nexport { YAMLMap, findPair };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}