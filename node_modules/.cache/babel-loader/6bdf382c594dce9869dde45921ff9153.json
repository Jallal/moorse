{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport * as React from 'react';\nimport { PanelBarItem } from './PanelBarItem';\n/**\n * @hidden\n */\nexport var renderChildren = function renderChildren(_a) {\n  var _b = _a.animation,\n    animation = _b === void 0 ? true : _b,\n    _c = _a.keepItemsMounted,\n    keepItemsMounted = _c === void 0 ? false : _c,\n    state = _a.state,\n    expanded = _a.expanded,\n    handleSelect = _a.handleSelect,\n    children = _a.children,\n    _d = _a.parentExpanded,\n    parentExpanded = _d === void 0 ? true : _d,\n    _e = _a.level,\n    level = _e === void 0 ? 0 : _e,\n    _f = _a.parentPrivateKey,\n    parentPrivateKey = _f === void 0 ? [] : _f;\n  return React.Children.map(children, function (child, idx) {\n    if (child && child.type === PanelBarItem) {\n      var nestedChildren = void 0;\n      var privateKey = getId(child, parentPrivateKey, idx);\n      if (child.props.children) {\n        var renderState = {\n          animation: animation,\n          keepItemsMounted: keepItemsMounted,\n          state: state,\n          expanded: expanded,\n          handleSelect: handleSelect,\n          children: child.props.children,\n          parentExpanded: (expanded || []).indexOf(privateKey) > -1,\n          level: level + 1,\n          parentPrivateKey: __spreadArray(__spreadArray([], parentPrivateKey, true), [privateKey], false)\n        };\n        nestedChildren = renderChildren(renderState);\n      }\n      return React.cloneElement(child, __assign(__assign({}, child.props), {\n        animation: child.props.animation !== undefined ? child.props.animation : animation,\n        keepItemsMounted: keepItemsMounted,\n        id: child.props.id || \"k-panelbar-item-default-\".concat(privateKey),\n        uniquePrivateKey: privateKey,\n        parentUniquePrivateKey: parentPrivateKey,\n        parentExpanded: parentExpanded,\n        level: level,\n        expanded: (expanded || []).indexOf(privateKey) > -1,\n        focused: state.focused === privateKey && state.wrapperFocused,\n        selected: state.selected === privateKey,\n        children: nestedChildren,\n        onSelect: handleSelect\n      }));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"k-panelbar-content k-content\"\n      }, child);\n    }\n  });\n};\n/**\n * @hidden\n */\nexport var getFirstId = function getFirstId(props) {\n  var firstItem = React.Children.toArray(props.children)[0];\n  if (firstItem) {\n    return getId(firstItem, [], 0);\n  }\n  return '';\n};\n/**\n * @hidden\n */\nexport var getInitialState = function getInitialState(props, expandMode, result, parentExpanded, parentPrivateKey) {\n  if (result === void 0) {\n    result = {\n      expanded: props.expanded || [],\n      selected: props.selected || '',\n      focused: props.focused || '',\n      wrapperFocused: false\n    };\n  }\n  if (parentExpanded === void 0) {\n    parentExpanded = true;\n  }\n  if (parentPrivateKey === void 0) {\n    parentPrivateKey = [];\n  }\n  React.Children.map(props.children, function (child, idx) {\n    if (child && child.type === PanelBarItem) {\n      var privateKey = getId(child, parentPrivateKey, idx);\n      if (!child.props.disabled && parentExpanded) {\n        if (child.props.selected) {\n          result.selected = privateKey;\n        }\n        if (child.props.focused) {\n          result.focused = privateKey;\n        }\n        if (child.props.expanded) {\n          if (expandMode === 'multiple') {\n            result.expanded.push(privateKey);\n          } else if (expandMode === 'single') {\n            result.expanded = [privateKey];\n          }\n        }\n        if (child.props.children) {\n          result = getInitialState(child.props, expandMode, result, !!child.props.expanded, __spreadArray(__spreadArray([], parentPrivateKey, true), [privateKey], false));\n        }\n      }\n    }\n  });\n  return result;\n};\n/**\n * @hidden\n */\nvar getId = function getId(child, parentPrivateKey, idx) {\n  return child && child.props && child.props.id ? child.props.id : parentPrivateKey.length ? parentPrivateKey[parentPrivateKey.length - 1] + \".\".concat(idx) : \".\".concat(idx);\n};\n/**\n * @hidden\n */\nexport function flatVisibleItems(data, flattedItems) {\n  if (flattedItems === void 0) {\n    flattedItems = [];\n  }\n  (data || []).forEach(function (item) {\n    if (!item.disabled) {\n      flattedItems.push(item);\n      if (item.expanded && item.children) {\n        flatVisibleItems(item.children, flattedItems);\n      }\n    }\n  });\n  return flattedItems;\n}\n/**\n * @hidden\n */\nexport function flatChildren(children, flattenChildren) {\n  if (flattenChildren === void 0) {\n    flattenChildren = [];\n  }\n  React.Children.forEach(children, function (child) {\n    if (child && child.props && !child.props.disabled) {\n      flattenChildren.push(child);\n      if (child.props.children) {\n        flatChildren(child.props.children, flattenChildren);\n      }\n    }\n  });\n  return flattenChildren;\n}\n;\n/**\n * @hidden\n */\nexport function flatVisibleChildren(children, flattenVisibleChildren) {\n  if (flattenVisibleChildren === void 0) {\n    flattenVisibleChildren = [];\n  }\n  React.Children.forEach(children, function (child) {\n    if (child && child.props && !child.props.disabled && (child.props.expanded || child.props.parentExpanded)) {\n      flattenVisibleChildren.push(child);\n      if (child.props.children) {\n        flatVisibleChildren(child.props.children, flattenVisibleChildren);\n      }\n    }\n  });\n  return flattenVisibleChildren;\n}\n;\n/**\n * @hidden\n */\nexport var isPresent = function isPresent(value) {\n  return value !== null && value !== undefined;\n};\n/**\n * Represents the PanelBarUtils functions.\n */\nexport var PanelBarUtils;\n(function (PanelBarUtils) {\n  /**\n   * Maps a collection of PanelBarItemProps to PanelBarItem components\n   * ([see example]({% slug customization_panelbar %})).\n   * Contained in the `PanelBarUtils` object.\n   *\n   * @param items - A collection of PanelBarItemProps.\n   * @return {PanelBarItem[]} Returns an array of PanelBarItem components.\n   */\n  function mapItemsToComponents(items) {\n    return items.map(function (item, idx) {\n      var children;\n      if (item.content) {\n        children = item.content;\n      }\n      if (item.children) {\n        children = mapItemsToComponents(item.children);\n      }\n      return React.createElement(PanelBarItem, __assign({}, item, {\n        children: children,\n        key: item.id || idx\n      }));\n    });\n  }\n  PanelBarUtils.mapItemsToComponents = mapItemsToComponents;\n})(PanelBarUtils || (PanelBarUtils = {}));\n/**\n * @hidden\n */\nexport var isArrayEqual = function isArrayEqual(firstArray, secondArray) {\n  if (firstArray.length !== secondArray.length) {\n    return false;\n  }\n  return firstArray.every(function (ex, i) {\n    return ex === secondArray[i];\n  });\n};","map":null,"metadata":{},"sourceType":"module"}