{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from '../package-metadata';\nimport { guid } from '@progress/kendo-react-common';\n/**\n * Represents the [KendoReact GridLayoutItem component]({% slug overview_gridlayout %}).\n *\n * @example\n * ```jsx\n *\n * const App = () => {\n *   return (\n *     <GridLayout\n *       rows={[{height: 50}, {height: 50}, {height: 50}]}\n *       cols={[{width: 50}, {width: 50}, {width: 50}]}\n *       gap={{rows: 5, cols: 5}}\n *       align={{horizontal: 'stretch', vertical: 'stretch'}}\n *     >\n *       <GridLayoutItem row={1} col={1}>Box</GridLayoutItem>\n *       <GridLayoutItem row={1} col={2} colSpan={2}>Box</GridLayoutItem>\n *       <GridLayoutItem row={2} col={1} colSpan={2} rowSpan={2}>Box</GridLayoutItem>\n *       <GridLayoutItem row={2} col={3}>Box</GridLayoutItem>\n *       <GridLayoutItem row={3} col={3}>Box</GridLayoutItem>\n *     </GridLayout>\n *   );\n * };\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nexport var GridLayoutItem = React.forwardRef(function (props, ref) {\n  validatePackage(packageMetadata);\n  var elementRef = React.useRef(null);\n  var getImperativeHandle = React.useCallback(function () {\n    return {\n      element: elementRef.current\n    };\n  }, []);\n  React.useImperativeHandle(ref, getImperativeHandle);\n  var className = props.className,\n    style = props.style,\n    id = props.id,\n    children = props.children,\n    row = props.row,\n    col = props.col,\n    rowSpan = props.rowSpan,\n    colSpan = props.colSpan;\n  var itemId = React.useMemo(function () {\n    return guid();\n  }, []);\n  var gridLayoutItemStyles = __assign({\n    gridArea: \"\".concat(row || 'auto', \" / \").concat(col || 'auto', \" / \").concat(rowSpan ? 'span ' + rowSpan : 'auto', \" / \").concat(colSpan ? 'span ' + colSpan : 'auto')\n  }, style);\n  return React.createElement(\"div\", {\n    ref: elementRef,\n    className: className,\n    style: gridLayoutItemStyles,\n    id: id || itemId\n  }, children);\n});\nGridLayoutItem.propTypes = {\n  className: PropTypes.string,\n  style: PropTypes.object,\n  children: PropTypes.any,\n  id: PropTypes.string\n};\nGridLayoutItem.displayName = 'KendoReactGridLayoutItem';","map":null,"metadata":{},"sourceType":"module"}