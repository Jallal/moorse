{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { TabStripNavigation } from './TabStripNavigation';\nimport { TabStripContent } from './TabStripContent';\nimport { Keys, classNames, validatePackage } from '@progress/kendo-react-common';\nimport { packageMetadata } from '../package-metadata';\nvar TabStrip = /** @class */function (_super) {\n  __extends(TabStrip, _super);\n  function TabStrip(props) {\n    var _a;\n    var _this = _super.call(this, props) || this;\n    _this._element = null;\n    _this.keyBinding = (_a = {}, _a[Keys.left] = function () {\n      return _this.prevNavigatableTab();\n    }, _a[Keys.right] = function () {\n      return _this.nextNavigatableTab();\n    }, _a[Keys.down] = function () {\n      return _this.nextNavigatableTab();\n    }, _a[Keys.up] = function () {\n      return _this.prevNavigatableTab();\n    }, _a[Keys.home] = function () {\n      return 0;\n    }, _a[Keys.end] = function () {\n      return React.Children.count(_this.props.children) - 1;\n    }, _a);\n    /**\n     * @hidden\n     */\n    _this.onSelect = function (index) {\n      if (_this.props.selected !== index) {\n        if (_this.props.onSelect) {\n          _this.props.onSelect({\n            selected: index\n          });\n        }\n      }\n    };\n    /**\n     * @hidden\n     */\n    _this.onKeyDown = function (event) {\n      var handler;\n      switch (event.keyCode) {\n        case Keys.left:\n          handler = _this.keyBinding[_this.invertKeys(Keys.left, Keys.right)];\n          break;\n        case Keys.right:\n          handler = _this.keyBinding[_this.invertKeys(Keys.right, Keys.left)];\n          break;\n        case Keys.up:\n          handler = _this.keyBinding[Keys.up];\n          break;\n        case Keys.down:\n          handler = _this.keyBinding[Keys.down];\n          break;\n        case Keys.home:\n          handler = _this.keyBinding[Keys.home];\n          break;\n        case Keys.end:\n          handler = _this.keyBinding[Keys.end];\n          break;\n        default:\n          break;\n      }\n      if (handler) {\n        event.preventDefault();\n        _this.onSelect(handler());\n      }\n    };\n    _this.renderContent = function (tabProps) {\n      var selected = tabProps.selected,\n        children = tabProps.children,\n        tabContentStyle = tabProps.tabContentStyle;\n      var childrenCount = React.Children.count(children);\n      if (selected < childrenCount && selected > -1) {\n        return React.createElement(TabStripContent, __assign({\n          index: selected\n        }, tabProps, {\n          style: tabContentStyle\n        }));\n      }\n      return null;\n    };\n    _this.firstNavigatableTab = function () {\n      var children = _this.children();\n      var length = React.Children.count(children);\n      if (children) {\n        for (var i = 0; i < length; i++) {\n          if (!children[i].props.disabled) {\n            return i;\n          }\n        }\n      }\n    };\n    _this.lastNavigatableTab = function () {\n      var children = _this.children();\n      var length = React.Children.count(children);\n      if (children) {\n        for (var i = length - 1; i > 0; i--) {\n          if (!children[i].props.disabled) {\n            return i;\n          }\n        }\n      }\n    };\n    _this.prevNavigatableTab = function () {\n      var children = _this.children();\n      var selected = _this.props.selected;\n      var index = selected ? selected - 1 : -1;\n      if (index < 0) {\n        return _this.lastNavigatableTab();\n      }\n      if (children) {\n        for (var i = index; i > -1; i--) {\n          if (!children[i].props.disabled) {\n            return i;\n          }\n          if (i === 0) {\n            return _this.lastNavigatableTab();\n          }\n        }\n      }\n    };\n    _this.nextNavigatableTab = function () {\n      var children = _this.children();\n      var selected = _this.props.selected;\n      var index = selected ? selected + 1 : 1;\n      var childrenCount = React.Children.count(children);\n      if (index >= childrenCount) {\n        return _this.firstNavigatableTab();\n      }\n      if (children) {\n        for (var i = index; i < childrenCount; i++) {\n          if (!children[i].props.disabled) {\n            return i;\n          }\n          if (i + 1 === childrenCount) {\n            return _this.firstNavigatableTab();\n          }\n        }\n      }\n    };\n    validatePackage(packageMetadata);\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n  TabStrip.prototype.render = function () {\n    var _this = this;\n    var tabProps = __assign(__assign({}, this.props), {\n      children: this.children(),\n      onKeyDown: this.onKeyDown,\n      onSelect: this.onSelect\n    });\n    var tabPosition = tabProps.tabPosition,\n      _a = tabProps.tabIndex,\n      tabIndex = _a === void 0 ? 0 : _a;\n    var bottom = tabPosition === 'bottom';\n    var componentClasses = classNames('k-tabstrip', {\n      'k-tabstrip-left': tabPosition === 'left',\n      'k-tabstrip-right': tabPosition === 'right',\n      'k-tabstrip-bottom': tabPosition === 'bottom',\n      'k-tabstrip-top': tabPosition === 'top',\n      'k-tabstrip-scrollable': this.props.scrollable\n    }, this.props.className);\n    return React.createElement(\"div\", {\n      id: this.props.id,\n      ref: function ref(div) {\n        return _this._element = div;\n      },\n      dir: this.props.dir,\n      className: componentClasses,\n      style: this.props.style\n    }, !bottom && React.createElement(TabStripNavigation, __assign({}, tabProps, {\n      tabIndex: tabIndex\n    })), this.renderContent(tabProps), bottom && React.createElement(TabStripNavigation, __assign({}, tabProps, {\n      tabIndex: tabIndex\n    })));\n  };\n  TabStrip.prototype.invertKeys = function (original, inverted) {\n    var rtl = this._element && getComputedStyle(this._element).direction === 'rtl' || false;\n    return rtl ? inverted : original;\n  };\n  TabStrip.prototype.children = function () {\n    return React.Children.toArray(this.props.children).filter(function (c) {\n      return c;\n    });\n  };\n  /**\n   * @hidden\n   */\n  TabStrip.propTypes = {\n    animation: PropTypes.bool,\n    children: PropTypes.node,\n    onSelect: PropTypes.func,\n    selected: PropTypes.number,\n    style: PropTypes.object,\n    tabContentStyle: PropTypes.object,\n    tabPosition: PropTypes.string,\n    tabIndex: PropTypes.number,\n    className: PropTypes.string,\n    dir: PropTypes.string\n  };\n  /**\n   * @hidden\n   */\n  TabStrip.defaultProps = {\n    animation: true,\n    tabPosition: 'top',\n    keepTabsMounted: false,\n    buttonScrollSpeed: 100,\n    mouseScrollSpeed: 10\n  };\n  return TabStrip;\n}(React.Component);\nexport { TabStrip };","map":null,"metadata":{},"sourceType":"module"}