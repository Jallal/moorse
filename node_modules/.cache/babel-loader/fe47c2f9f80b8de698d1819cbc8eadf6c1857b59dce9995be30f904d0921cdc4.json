{"ast":null,"code":"import { Scalar } from '../../nodes/Scalar.js';\nimport { map } from '../common/map.js';\nimport { seq } from '../common/seq.js';\nfunction intIdentify(value) {\n  return typeof value === 'bigint' || Number.isInteger(value);\n}\nconst stringifyJSON = _ref => {\n  let {\n    value\n  } = _ref;\n  return JSON.stringify(value);\n};\nconst jsonScalars = [{\n  identify: value => typeof value === 'string',\n  default: true,\n  tag: 'tag:yaml.org,2002:str',\n  resolve: str => str,\n  stringify: stringifyJSON\n}, {\n  identify: value => value == null,\n  createNode: () => new Scalar(null),\n  default: true,\n  tag: 'tag:yaml.org,2002:null',\n  test: /^null$/,\n  resolve: () => null,\n  stringify: stringifyJSON\n}, {\n  identify: value => typeof value === 'boolean',\n  default: true,\n  tag: 'tag:yaml.org,2002:bool',\n  test: /^true|false$/,\n  resolve: str => str === 'true',\n  stringify: stringifyJSON\n}, {\n  identify: intIdentify,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  test: /^-?(?:0|[1-9][0-9]*)$/,\n  resolve: (str, _onError, _ref2) => {\n    let {\n      intAsBigInt\n    } = _ref2;\n    return intAsBigInt ? BigInt(str) : parseInt(str, 10);\n  },\n  stringify: _ref3 => {\n    let {\n      value\n    } = _ref3;\n    return intIdentify(value) ? value.toString() : JSON.stringify(value);\n  }\n}, {\n  identify: value => typeof value === 'number',\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  test: /^-?(?:0|[1-9][0-9]*)(?:\\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,\n  resolve: str => parseFloat(str),\n  stringify: stringifyJSON\n}];\nconst jsonError = {\n  default: true,\n  tag: '',\n  test: /^/,\n  resolve(str, onError) {\n    onError(`Unresolved plain scalar ${JSON.stringify(str)}`);\n    return str;\n  }\n};\nconst schema = [map, seq].concat(jsonScalars, jsonError);\nexport { schema };","map":{"version":3,"names":["Scalar","map","seq","intIdentify","value","Number","isInteger","stringifyJSON","JSON","stringify","jsonScalars","identify","default","tag","resolve","str","createNode","test","_onError","intAsBigInt","BigInt","parseInt","toString","parseFloat","jsonError","onError","schema","concat"],"sources":["/Users/jhazzatgmail.com/Documents/moorseapp/node_modules/yaml/browser/dist/schema/json/schema.js"],"sourcesContent":["import { Scalar } from '../../nodes/Scalar.js';\nimport { map } from '../common/map.js';\nimport { seq } from '../common/seq.js';\n\nfunction intIdentify(value) {\n    return typeof value === 'bigint' || Number.isInteger(value);\n}\nconst stringifyJSON = ({ value }) => JSON.stringify(value);\nconst jsonScalars = [\n    {\n        identify: value => typeof value === 'string',\n        default: true,\n        tag: 'tag:yaml.org,2002:str',\n        resolve: str => str,\n        stringify: stringifyJSON\n    },\n    {\n        identify: value => value == null,\n        createNode: () => new Scalar(null),\n        default: true,\n        tag: 'tag:yaml.org,2002:null',\n        test: /^null$/,\n        resolve: () => null,\n        stringify: stringifyJSON\n    },\n    {\n        identify: value => typeof value === 'boolean',\n        default: true,\n        tag: 'tag:yaml.org,2002:bool',\n        test: /^true|false$/,\n        resolve: str => str === 'true',\n        stringify: stringifyJSON\n    },\n    {\n        identify: intIdentify,\n        default: true,\n        tag: 'tag:yaml.org,2002:int',\n        test: /^-?(?:0|[1-9][0-9]*)$/,\n        resolve: (str, _onError, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str, 10),\n        stringify: ({ value }) => intIdentify(value) ? value.toString() : JSON.stringify(value)\n    },\n    {\n        identify: value => typeof value === 'number',\n        default: true,\n        tag: 'tag:yaml.org,2002:float',\n        test: /^-?(?:0|[1-9][0-9]*)(?:\\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,\n        resolve: str => parseFloat(str),\n        stringify: stringifyJSON\n    }\n];\nconst jsonError = {\n    default: true,\n    tag: '',\n    test: /^/,\n    resolve(str, onError) {\n        onError(`Unresolved plain scalar ${JSON.stringify(str)}`);\n        return str;\n    }\n};\nconst schema = [map, seq].concat(jsonScalars, jsonError);\n\nexport { schema };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,GAAG,QAAQ,kBAAkB;AACtC,SAASC,GAAG,QAAQ,kBAAkB;AAEtC,SAASC,WAAW,CAACC,KAAK,EAAE;EACxB,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAIC,MAAM,CAACC,SAAS,CAACF,KAAK,CAAC;AAC/D;AACA,MAAMG,aAAa,GAAG;EAAA,IAAC;IAAEH;EAAM,CAAC;EAAA,OAAKI,IAAI,CAACC,SAAS,CAACL,KAAK,CAAC;AAAA;AAC1D,MAAMM,WAAW,GAAG,CAChB;EACIC,QAAQ,EAAEP,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ;EAC5CQ,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,uBAAuB;EAC5BC,OAAO,EAAEC,GAAG,IAAIA,GAAG;EACnBN,SAAS,EAAEF;AACf,CAAC,EACD;EACII,QAAQ,EAAEP,KAAK,IAAIA,KAAK,IAAI,IAAI;EAChCY,UAAU,EAAE,MAAM,IAAIhB,MAAM,CAAC,IAAI,CAAC;EAClCY,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,wBAAwB;EAC7BI,IAAI,EAAE,QAAQ;EACdH,OAAO,EAAE,MAAM,IAAI;EACnBL,SAAS,EAAEF;AACf,CAAC,EACD;EACII,QAAQ,EAAEP,KAAK,IAAI,OAAOA,KAAK,KAAK,SAAS;EAC7CQ,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,wBAAwB;EAC7BI,IAAI,EAAE,cAAc;EACpBH,OAAO,EAAEC,GAAG,IAAIA,GAAG,KAAK,MAAM;EAC9BN,SAAS,EAAEF;AACf,CAAC,EACD;EACII,QAAQ,EAAER,WAAW;EACrBS,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,uBAAuB;EAC5BI,IAAI,EAAE,uBAAuB;EAC7BH,OAAO,EAAE,CAACC,GAAG,EAAEG,QAAQ;IAAA,IAAE;MAAEC;IAAY,CAAC;IAAA,OAAKA,WAAW,GAAGC,MAAM,CAACL,GAAG,CAAC,GAAGM,QAAQ,CAACN,GAAG,EAAE,EAAE,CAAC;EAAA;EAC1FN,SAAS,EAAE;IAAA,IAAC;MAAEL;IAAM,CAAC;IAAA,OAAKD,WAAW,CAACC,KAAK,CAAC,GAAGA,KAAK,CAACkB,QAAQ,EAAE,GAAGd,IAAI,CAACC,SAAS,CAACL,KAAK,CAAC;EAAA;AAC3F,CAAC,EACD;EACIO,QAAQ,EAAEP,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ;EAC5CQ,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,yBAAyB;EAC9BI,IAAI,EAAE,wDAAwD;EAC9DH,OAAO,EAAEC,GAAG,IAAIQ,UAAU,CAACR,GAAG,CAAC;EAC/BN,SAAS,EAAEF;AACf,CAAC,CACJ;AACD,MAAMiB,SAAS,GAAG;EACdZ,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,EAAE;EACPI,IAAI,EAAE,GAAG;EACTH,OAAO,CAACC,GAAG,EAAEU,OAAO,EAAE;IAClBA,OAAO,CAAE,2BAA0BjB,IAAI,CAACC,SAAS,CAACM,GAAG,CAAE,EAAC,CAAC;IACzD,OAAOA,GAAG;EACd;AACJ,CAAC;AACD,MAAMW,MAAM,GAAG,CAACzB,GAAG,EAAEC,GAAG,CAAC,CAACyB,MAAM,CAACjB,WAAW,EAAEc,SAAS,CAAC;AAExD,SAASE,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}