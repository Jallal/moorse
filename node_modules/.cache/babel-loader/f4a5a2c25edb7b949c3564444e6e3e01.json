{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { PanelBarItem } from './PanelBarItem';\nimport { renderChildren, getInitialState, flatVisibleChildren, flatChildren, isArrayEqual, getFirstId } from './util';\nimport { classNames, Keys } from '@progress/kendo-react-common';\nimport { validatePackage } from '@progress/kendo-react-common';\nimport { packageMetadata } from '../package-metadata';\nimport { NavigationAction } from './interfaces/NavigationAction';\nvar PanelBar = /** @class */function (_super) {\n  __extends(PanelBar, _super);\n  function PanelBar(props) {\n    var _this = _super.call(this, props) || this;\n    _this._element = null;\n    /**\n     * @hidden\n     */\n    _this.handleSelect = function (event) {\n      _this.onSelect(event);\n      _this.onFocus(event);\n    };\n    /**\n     * @hidden\n     */\n    _this.onSelect = function (event) {\n      var flattenChildren = flatChildren(React.Children.toArray(_this.children));\n      var selectedChild;\n      var newExpanded;\n      flattenChildren.forEach(function (child) {\n        if (child.props.uniquePrivateKey === (event.uniquePrivateKey || _this.state.focused)) {\n          selectedChild = child;\n        }\n      });\n      switch (_this.expandMode) {\n        case 'single':\n          newExpanded = __spreadArray(__spreadArray([], selectedChild.props.parentUniquePrivateKey, true), [selectedChild.props.uniquePrivateKey], false);\n          if (isArrayEqual(_this.expandedItems, newExpanded)) {\n            if (selectedChild.props.parentUniquePrivateKey) {\n              newExpanded = __spreadArray([], selectedChild.props.parentUniquePrivateKey, true);\n            } else {\n              newExpanded = [];\n            }\n          }\n          break;\n        case 'multiple':\n          newExpanded = _this.expandedItems.slice();\n          var index = newExpanded.indexOf(selectedChild.props.uniquePrivateKey);\n          index === -1 ? newExpanded.push(selectedChild.props.uniquePrivateKey) : newExpanded.splice(index, 1);\n          break;\n        default:\n          newExpanded = _this.expandedItems.slice();\n          break;\n      }\n      _this.setState({\n        selected: selectedChild.props.uniquePrivateKey,\n        expanded: newExpanded\n      });\n      if (_this.props.onSelect) {\n        _this.props.onSelect.call(undefined, {\n          target: selectedChild,\n          expandedItems: newExpanded\n        });\n      }\n    };\n    /**\n     * @hidden\n     */\n    _this.onFocus = function (event, step) {\n      if (step === void 0) {\n        step = 0;\n      }\n      var flattenChildren = flatVisibleChildren(React.Children.toArray(_this.children));\n      var focusedChild;\n      flattenChildren.forEach(function (child, ixd) {\n        if (child.props.uniquePrivateKey === (event.uniquePrivateKey || _this.state.focused)) {\n          var index = ixd + step < 0 ? 0 : ixd + step > flattenChildren.length ? flattenChildren.length - 1 : ixd + step;\n          focusedChild = flattenChildren[index];\n        }\n      });\n      if (focusedChild) {\n        _this.activeDescendant = focusedChild.props.id;\n        _this.setState({\n          focused: focusedChild.props.uniquePrivateKey\n        });\n      }\n    };\n    /**\n     * @hidden\n     */\n    _this.onNavigate = function (event, action) {\n      var step;\n      switch (action) {\n        case NavigationAction.Previous:\n          step = -1;\n          _this.onFocus(event, step);\n          break;\n        case NavigationAction.Next:\n          step = 1;\n          _this.onFocus(event, step);\n          break;\n        case NavigationAction.Toggle:\n          _this.onSelect(event);\n          break;\n        default:\n      }\n    };\n    _this.handleWrapperFocus = function () {\n      clearTimeout(_this.nextTickId);\n      if (!_this.state.wrapperFocused) {\n        _this.setState({\n          wrapperFocused: true\n        });\n      }\n    };\n    _this.handleWrapperBlur = function () {\n      _this.nextTick(function () {\n        _this.setState({\n          wrapperFocused: false\n        });\n      });\n    };\n    _this.handleKeyDown = function (event) {\n      var rtl = _this._element && getComputedStyle(_this._element).direction === 'rtl' || false;\n      if (event.target === event.currentTarget) {\n        var keyCode = event.keyCode;\n        var action = void 0;\n        switch (keyCode) {\n          case Keys.left:\n            action = !rtl ? NavigationAction.Previous : NavigationAction.Next;\n            break;\n          case Keys.up:\n            action = NavigationAction.Previous;\n            break;\n          case Keys.right:\n            action = !rtl ? NavigationAction.Next : NavigationAction.Previous;\n            break;\n          case Keys.down:\n            action = NavigationAction.Next;\n            break;\n          case Keys.space:\n          case Keys.enter:\n            action = NavigationAction.Toggle;\n            break;\n          default:\n            action = null;\n            break;\n        }\n        if (action !== null) {\n          event.preventDefault();\n          _this.onNavigate(event, action);\n        }\n      }\n    };\n    validatePackage(packageMetadata);\n    var initialState = getInitialState(props, _this.expandMode);\n    if (!initialState.focused) {\n      initialState.focused = getFirstId(props);\n    }\n    _this.state = initialState;\n    return _this;\n  }\n  Object.defineProperty(PanelBar.prototype, \"expandMode\", {\n    get: function get() {\n      return this.props.expandMode || 'multiple';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PanelBar.prototype, \"selectedItem\", {\n    get: function get() {\n      var _a = this.props.selected,\n        selected = _a === void 0 ? this.state.selected : _a;\n      return selected;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PanelBar.prototype, \"expandedItems\", {\n    get: function get() {\n      var expanded = this.props.isControlled ? this.props.expanded || [] : this.state.expanded;\n      return expanded;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PanelBar.prototype, \"children\", {\n    get: function get() {\n      var state = __assign(__assign({}, this.state), {\n        selected: this.selectedItem\n      });\n      var renderState = {\n        animation: this.props.animation,\n        keepItemsMounted: this.props.keepItemsMounted,\n        state: state,\n        expanded: this.expandedItems,\n        handleSelect: this.handleSelect,\n        children: this.props.children\n      };\n      return renderChildren(renderState);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n  PanelBar.prototype.render = function () {\n    var _this = this;\n    var ariaProps = {\n      'aria-activedescendant': this.activeDescendant\n    };\n    var className = classNames('k-panelbar', this.props.className);\n    return React.createElement(\"ul\", __assign({\n      ref: function ref(div) {\n        _this._element = div;\n      },\n      dir: this.props.dir,\n      role: 'tree',\n      tabIndex: 0,\n      onKeyDown: this.handleKeyDown,\n      onFocus: this.handleWrapperFocus,\n      onBlur: this.handleWrapperBlur,\n      className: className,\n      style: this.props.style\n    }, ariaProps), this.children);\n  };\n  PanelBar.prototype.nextTick = function (f) {\n    this.nextTickId = window.setTimeout(function () {\n      return f();\n    });\n  };\n  /**\n   * @hidden\n   */\n  PanelBar.propTypes = {\n    animation: PropTypes.bool,\n    children: function children(props, propName) {\n      var prop = props[propName];\n      if (prop) {\n        if (Array.isArray(prop)) {\n          for (var _i = 0, prop_1 = prop; _i < prop_1.length; _i++) {\n            var value = prop_1[_i];\n            if (!value.type || value.type !== PanelBarItem) {\n              return new Error('PanelBar children should be either PanelBarItem or Array of PanelBarItem.');\n            }\n          }\n        } else {\n          if (prop.type !== PanelBarItem) {\n            return new Error('PanelBar child should be either PanelBarItem or Array of PanelBarItem.');\n          }\n        }\n        return null;\n      }\n    },\n    dir: PropTypes.string,\n    selected: PropTypes.string,\n    expanded: PropTypes.arrayOf(PropTypes.string),\n    focused: PropTypes.string,\n    expandMode: PropTypes.oneOf(['single', 'multiple']),\n    className: PropTypes.string,\n    keepItemsMounted: PropTypes.bool,\n    onSelect: PropTypes.func,\n    style: PropTypes.object\n  };\n  /**\n   * @hidden\n   */\n  PanelBar.defaultProps = {\n    expandMode: 'multiple',\n    animation: true,\n    keepItemsMounted: false\n  };\n  return PanelBar;\n}(React.Component);\nexport { PanelBar };","map":null,"metadata":{},"sourceType":"module"}