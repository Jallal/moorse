{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { useDir, getter, getTabIndex, classNames, useMouse, kendoThemeMaps } from '@progress/kendo-react-common';\nimport { selectionReducer } from './selection-reducer';\nimport { focusReducer } from './focus-reducer';\nimport { dataReducer } from './data-reducer';\nimport { Chip } from './Chip';\nimport { validatePackage } from '@progress/kendo-react-common';\nimport { packageMetadata } from '../package-metadata';\n/**\n * @hidden\n */\nexport var ChipListSelectionContext = React.createContext([null, function (_args) {\n  /**/\n}]);\n/**\n * @hidden\n */\nexport var ChipListFocusContext = React.createContext([null, function (_args) {\n  /**/\n}]);\n/**\n * @hidden\n */\nexport var ChipListDataContext = React.createContext([null, function (_args) {\n  /**/\n}]);\n/**\n * @hidden\n */\nvar useSelection = function useSelection(defaultValue, args, callback) {\n  var _a = React.useState(defaultValue),\n    state = _a[0],\n    setState = _a[1];\n  var handleDispatchSelection = function handleDispatchSelection(action) {\n    var newState = selectionReducer(args.state || state, __assign(__assign({}, action), args));\n    if (callback) {\n      callback(newState, action.event);\n    }\n    setState(newState);\n  };\n  return [state, handleDispatchSelection];\n};\n/**\n * @hidden\n */\nvar useFocus = function useFocus(args) {\n  var _a = React.useState(null),\n    state = _a[0],\n    setState = _a[1];\n  var handleDispatchFocus = function handleDispatchFocus(action) {\n    var newState = focusReducer(action.payload, __assign(__assign({}, action), args));\n    setState(newState);\n  };\n  return [state, handleDispatchFocus];\n};\n/**\n * @hidden\n */\nvar useData = function useData(defaultData, args, callback) {\n  var _a = React.useState(defaultData),\n    state = _a[0],\n    setState = _a[1];\n  var handleDispatchData = function handleDispatchData(action) {\n    var newState = dataReducer(args.state || state, __assign(__assign({}, action), args));\n    if (callback) {\n      callback(newState, action.event);\n    }\n    setState(newState);\n  };\n  return [state, handleDispatchData];\n};\n/**\n * Represents the ChipList component.\n */\nexport var ChipList = React.forwardRef(function (props, ref) {\n  var _a;\n  validatePackage(packageMetadata);\n  var target = React.useRef(null);\n  var chipListRef = React.useRef(null);\n  var dir = useDir(chipListRef, props.dir);\n  var chip = props.chip,\n    id = props.id,\n    style = props.style,\n    tabIndex = props.tabIndex,\n    disabled = props.disabled,\n    size = props.size,\n    className = props.className,\n    ariaDescribedBy = props.ariaDescribedBy,\n    ariaLabelledBy = props.ariaLabelledBy,\n    _b = props.selection,\n    selection = _b === void 0 ? defaultProps.selection : _b,\n    _c = props.value,\n    value = _c === void 0 ? defaultProps.defaultValue : _c,\n    _d = props.defaultData,\n    defaultData = _d === void 0 ? defaultProps.defaultData : _d,\n    _e = props.valueField,\n    valueField = _e === void 0 ? defaultProps.valueField : _e,\n    _f = props.textField,\n    textField = _f === void 0 ? defaultProps.textField : _f,\n    onChange = props.onChange,\n    onDataChange = props.onDataChange;\n  var ChipComponent = React.useMemo(function () {\n    return chip || Chip;\n  }, [chip, Chip]);\n  React.useImperativeHandle(target, function () {\n    return {\n      element: chipListRef.current,\n      props: props\n    };\n  });\n  React.useImperativeHandle(ref, function () {\n    return target.current;\n  });\n  var handleChange = React.useCallback(function (newValue, event) {\n    if (onChange && target.current) {\n      onChange.call(undefined, {\n        value: newValue,\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [onChange]);\n  var _g = useSelection(value, {\n      selection: selection,\n      state: value\n    }, handleChange),\n    stateValue = _g[0],\n    dispatchStateValue = _g[1];\n  var handleDataChange = React.useCallback(function (newData, event) {\n    if (onDataChange && target.current) {\n      onDataChange.call(undefined, {\n        value: newData,\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [onDataChange]);\n  var _h = useData(props.data || defaultData, {\n      state: props.data,\n      valueField: valueField\n    }, handleDataChange),\n    stateData = _h[0],\n    dispatchData = _h[1];\n  var itemsReducer = React.useCallback(function (acc, current) {\n    acc.push(current[valueField]);\n    return acc;\n  }, [valueField]);\n  var data = React.useMemo(function () {\n    return props.data || stateData;\n  }, [props.data, stateData]);\n  var chipValue = React.useMemo(function () {\n    return value || stateValue;\n  }, [value, stateValue]);\n  var items = React.useMemo(function () {\n    return data.reduce(itemsReducer, []);\n  }, [data, itemsReducer]);\n  var valueGetter = React.useCallback(function (item) {\n    return getter(valueField)(item);\n  }, [valueField]);\n  var textGetter = React.useCallback(function (item) {\n    return getter(textField)(item);\n  }, [textField]);\n  var _j = useFocus({\n      items: items\n    }),\n    focus = _j[0],\n    dispatchFocus = _j[1];\n  var mouseProps = useMouse(props, target);\n  return React.createElement(ChipListSelectionContext.Provider, {\n    value: [chipValue, dispatchStateValue]\n  }, React.createElement(ChipListFocusContext.Provider, {\n    value: [focus, dispatchFocus]\n  }, React.createElement(ChipListDataContext.Provider, {\n    value: [data, dispatchData]\n  }, React.createElement(\"div\", __assign({\n    ref: chipListRef\n  }, mouseProps, {\n    role: 'listbox',\n    id: id,\n    dir: dir,\n    style: style,\n    tabIndex: getTabIndex(tabIndex, disabled, undefined),\n    className: classNames('k-chip-list', (_a = {\n      'k-rtl': dir === 'rtl',\n      'k-disabled': disabled\n    }, _a[\"k-chip-list-\".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a), className),\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-describedby\": ariaDescribedBy\n  }), data.map(function (item, index) {\n    return React.createElement(ChipComponent, {\n      role: 'option',\n      dataItem: item,\n      size: size,\n      key: [valueGetter(item), index].join('-'),\n      text: textGetter(item),\n      value: valueGetter(item)\n    });\n  })))));\n});\nvar propTypes = {\n  id: PropTypes.string,\n  className: PropTypes.string,\n  tabIndex: PropTypes.number,\n  data: PropTypes.any,\n  defaultData: PropTypes.arrayOf(PropTypes.any),\n  onDataChange: PropTypes.func,\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.arrayOf(PropTypes.any)]),\n  defaultValue: PropTypes.oneOfType([PropTypes.any, PropTypes.arrayOf(PropTypes.any)]),\n  onChange: PropTypes.func,\n  selection: PropTypes.oneOf(['single', 'none', 'multiple']),\n  textField: PropTypes.string,\n  valueField: PropTypes.string,\n  disabled: PropTypes.bool,\n  dir: PropTypes.oneOf(['ltr', 'rtl']),\n  ariaLabelledBy: PropTypes.string,\n  ariaDescribedBy: PropTypes.string,\n  size: PropTypes.oneOf([null, 'small', 'medium', 'large'])\n};\nvar defaultProps = {\n  chip: Chip,\n  size: 'medium',\n  disabled: false,\n  defaultValue: null,\n  defaultData: [],\n  dir: 'ltr',\n  selection: 'none',\n  textField: 'text',\n  valueField: 'value',\n  removable: 'removable'\n};\nChipList.displayName = 'KendoReactChipList';\n// TODO: delete casting when @types/react is updated!\nChipList.propTypes = propTypes;\nChipList.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}