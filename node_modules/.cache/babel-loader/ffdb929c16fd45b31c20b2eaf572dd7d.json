{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames, Icon } from '@progress/kendo-react-common';\nimport { Reveal } from '@progress/kendo-react-animation';\n/**\n * @hidden\n */\nfunction iconElement(_a) {\n  var imageUrl = _a.imageUrl,\n    icon = _a.icon,\n    iconClass = _a.iconClass;\n  if (imageUrl) {\n    return React.createElement(\"img\", {\n      role: \"presentation\",\n      className: 'k-panelbar-item-icon k-image',\n      src: imageUrl\n    });\n  } else if (icon) {\n    var iconClasses = classNames('k-panelbar-item-icon', 'k-icon', 'k-i-' + icon);\n    return React.createElement(\"span\", {\n      role: \"presentation\",\n      className: iconClasses\n    });\n  } else if (iconClass) {\n    return React.createElement(\"span\", {\n      role: \"presentation\",\n      className: 'k-panelbar-item-icon ' + iconClass\n    });\n  }\n  return null;\n}\nvar PanelBarItem = /** @class */function (_super) {\n  __extends(PanelBarItem, _super);\n  function PanelBarItem(props) {\n    var _this = _super.call(this, props) || this;\n    _this.handleItemClick = function () {\n      var _a = _this.props,\n        onSelect = _a.onSelect,\n        disabled = _a.disabled,\n        id = _a.id;\n      if (onSelect && !disabled) {\n        onSelect.call(undefined, {\n          uniquePrivateKey: _this.props.uniquePrivateKey,\n          id: id,\n          target: _this\n        });\n      }\n    };\n    _this.childFactory = function (child) {\n      if (_this.props.keepItemsMounted) {\n        return React.cloneElement(child, __assign(__assign({}, child.props), {\n          in: _this.props.expanded\n        }));\n      }\n      return child;\n    };\n    _this.state = {\n      show: props.expanded || false\n    };\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n  PanelBarItem.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      id = _a.id,\n      children = _a.children,\n      title = _a.title,\n      uniquePrivateKey = _a.uniquePrivateKey,\n      disabled = _a.disabled,\n      selected = _a.selected,\n      focused = _a.focused,\n      expanded = _a.expanded,\n      className = _a.className,\n      level = _a.level,\n      headerClassName = _a.headerClassName,\n      animation = _a.animation,\n      keepItemsMounted = _a.keepItemsMounted;\n    var panelBarItemAriaAttributes = {\n      'role': 'treeitem',\n      'aria-disabled': disabled,\n      'aria-hidden': !disabled && !expanded,\n      'aria-selected': !disabled && selected,\n      'aria-expanded': !disabled && expanded && !!children\n    };\n    var panelBarItemClassName = classNames('k-panelbar-item', {\n      'k-panelbar-header': level === 0,\n      'k-expanded': expanded && !!children,\n      'k-disabled': disabled\n    }, \"k-level-\".concat(level), className);\n    var panelBarLinkClassName = classNames('k-link', {\n      'k-selected': !disabled && selected,\n      'k-focus': !disabled && focused\n    }, headerClassName);\n    var animationStyle = {\n      display: 'block'\n    };\n    var icon = iconElement(this.props);\n    var arrow = !disabled && children ? React.createElement(Icon, {\n      name: expanded ? 'chevron-up' : 'chevron-down',\n      className: classNames('k-panelbar-toggle', expanded ? 'k-panelbar-collapse' : 'k-panelbar-expand')\n    }) : null;\n    var opened = !disabled && expanded;\n    var content = opened || keepItemsMounted ? React.createElement(\"ul\", {\n      role: \"group\",\n      className: \"k-panelbar-group k-panel k-group\",\n      style: {\n        display: keepItemsMounted ? this.state.show ? 'block' : 'none' : 'block'\n      }\n    }, children) : null;\n    var child = (animation !== undefined ? animation : true) && !disabled && children ? React.createElement(Reveal, {\n      transitionEnterDuration: 200,\n      transitionExitDuration: 200,\n      key: uniquePrivateKey + '_animation',\n      style: animationStyle,\n      children: content,\n      childFactory: keepItemsMounted && this.childFactory,\n      unmountOnExit: !keepItemsMounted,\n      onBeforeEnter: function onBeforeEnter() {\n        return keepItemsMounted && _this.setState({\n          show: true\n        });\n      },\n      onAfterExited: function onAfterExited() {\n        return keepItemsMounted && _this.setState({\n          show: false\n        });\n      }\n    }) : content;\n    return React.createElement(\"li\", __assign({\n      id: id,\n      className: panelBarItemClassName\n    }, panelBarItemAriaAttributes), React.createElement(\"span\", {\n      className: panelBarLinkClassName,\n      onClick: this.handleItemClick\n    }, icon, React.createElement(\"span\", {\n      className: 'k-panelbar-item-text'\n    }, title), arrow), child);\n  };\n  /**\n   * @hidden\n   */\n  PanelBarItem.propTypes = {\n    animation: PropTypes.bool,\n    children: PropTypes.any,\n    className: PropTypes.string,\n    expanded: PropTypes.bool,\n    disabled: PropTypes.bool,\n    onSelect: PropTypes.func,\n    selected: PropTypes.bool,\n    level: PropTypes.number,\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    focused: PropTypes.bool,\n    keepItemsMounted: PropTypes.bool\n  };\n  /**\n   * @hidden\n   */\n  PanelBarItem.defaultProps = {\n    title: 'Untitled'\n  };\n  return PanelBarItem;\n}(React.PureComponent);\nexport { PanelBarItem };","map":null,"metadata":{},"sourceType":"module"}