{"ast":null,"code":"import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { classNames, getTabIndex, useDir, dispatchEvent } from '@progress/kendo-react-common';\nimport { packageMetadata } from '../package-metadata';\nexport var BreadcrumbLink = React.forwardRef(function (props, ref) {\n  validatePackage(packageMetadata);\n  var target = React.useRef(null);\n  var linkRef = React.useRef(null);\n  var focus = React.useCallback(function () {\n    if (linkRef.current) {\n      linkRef.current.focus();\n    }\n  }, [linkRef]);\n  React.useImperativeHandle(target, function () {\n    return {\n      element: linkRef.current,\n      focus: focus,\n      props: props\n    };\n  });\n  React.useImperativeHandle(ref, function () {\n    return target.current;\n  });\n  var handleItemSelect = React.useCallback(function (event) {\n    if (props.id) {\n      dispatchEvent(props.onItemSelect, event, event.target, {\n        id: props.id\n      });\n    }\n  }, [props.onItemSelect]);\n  var handleKeyDown = React.useCallback(function (event) {\n    if (props.id) {\n      dispatchEvent(props.onKeyDown, event, event.target, {\n        id: props.id\n      });\n    }\n  }, [props.onKeyDown]);\n  return React.createElement(\"span\", {\n    \"aria-current\": props.ariaCurrent ? props.ariaCurrent : props.isLast,\n    id: props.id,\n    ref: linkRef,\n    style: props.style,\n    dir: useDir(linkRef, props.dir),\n    tabIndex: getTabIndex(props.tabIndex, props.disabled),\n    className: classNames('k-cursor-pointer k-flex-none k-breadcrumb-link k-breadcrumb-icontext-link', {\n      'k-disabled': props.disabled\n    }),\n    onClick: handleItemSelect,\n    onKeyDown: handleKeyDown\n  }, props.iconClass ? React.createElement(\"span\", {\n    className: classNames('k-icon', props.iconClass)\n  }) : props.icon ? props.icon : '', props.text);\n});\nvar propTypes = {\n  id: PropTypes.string,\n  className: PropTypes.string,\n  tabIndex: PropTypes.number,\n  style: PropTypes.object,\n  dir: PropTypes.string,\n  disabled: PropTypes.bool,\n  text: PropTypes.string,\n  icon: PropTypes.node,\n  iconClass: PropTypes.string,\n  onClick: PropTypes.func,\n  ariaCurrent: PropTypes.bool\n};\nBreadcrumbLink.displayName = 'KendoReactBreadcrumbLink';\n// TODO: delete casting when @types/react is updated!\nBreadcrumbLink.propTypes = propTypes;","map":null,"metadata":{},"sourceType":"module"}