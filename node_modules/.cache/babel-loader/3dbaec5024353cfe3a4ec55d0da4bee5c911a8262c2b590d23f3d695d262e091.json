{"ast":null,"code":"/**\n * yaml-validator\n * https://github.com/paazmaya/yaml-validator\n *\n * Copyright (c) Juga Paazmaya <paazmaya@yahoo.com> (https://paazmaya.fi)\n * Licensed under the MIT license.\n */\n\nconst fs = require('fs');\nconst yaml = require('js-yaml');\nconst check = require('check-type').init();\nconst FIND_LINENUMBER = /line (\\d+)/u;\nclass YamlValidatore {\n  constructor(options) {\n    this.options = Object.assign({\n      log: false,\n      structure: false,\n      onWarning: null,\n      writeJson: false\n    }, options);\n    this.logs = [];\n    this.nonValidPaths = []; // list of property paths\n    this.inValidFilesCount = 0;\n  }\n\n  /**\n   * Store log messages\n   * possible later use by writing a log file.\n   * @param {string} msg Error message\n   * @returns {void}\n   */\n  errored(msg) {\n    this.logs.push(msg);\n  }\n\n  /**\n   * Check that the given structure is available.\n   * @param {Object} doc Object loaded from Yaml file\n   * @param {Object} structure Structure requirements\n   * @param {string} parent Address in a dot notation\n   * @returns {Array} List of not found structure paths\n   */\n  validateStructure(doc, structure, parent) {\n    let notFound = [],\n      current = '',\n      notValid; // false or path\n\n    parent = parent || '';\n    Object.keys(structure).forEach(originKey => {\n      const optional = originKey.endsWith('?');\n      const key = originKey.replace(/\\?$/u, '');\n      current = parent;\n      if (!check(structure).is('Array')) {\n        current += (parent.length > 0 ? '.' : '') + key;\n      }\n      const item = structure[originKey];\n      if (item instanceof Array) {\n        if (check(doc).has(key) && check(doc[key]).is('Array')) {\n          doc[key].forEach((child, index) => {\n            if (item.length > 1) {\n              notValid = this.validateStructure([child], [item[index]], current + '[' + index + ']');\n            } else {\n              notValid = this.validateStructure([child], item, current + '[' + index + ']');\n            }\n            notFound = notFound.concat(notValid);\n          });\n        } else if (!optional) {\n          notFound.push(current);\n        }\n      } else if (typeof item === 'string') {\n        if (!check(doc).has(key) && optional) {\n          notValid = false;\n        } else {\n          notValid = !((check(structure).is('Array') || check(doc).has(key)) && check(doc[key]).is(item));\n        }\n\n        // Key can be a index number when the structure is an array, but passed as a string\n        notFound.push(notValid ? current : false);\n      } else if (typeof item === 'object' && item !== null) {\n        if (!optional) {\n          notValid = this.validateStructure(doc[key], item, current);\n          notFound = notFound.concat(notValid);\n        }\n      }\n    });\n    return notFound.filter(function filterFalse(item) {\n      return item !== false;\n    });\n  }\n\n  /**\n   * Parse the given Yaml data.\n   * @param {string} filepath Yaml file path\n   * @param {string} data Yaml data\n   * @returns {string|null} Parsed Yaml or null on failure\n   */\n  loadData(filepath, data) {\n    const onWarning = error => {\n      this.errored(filepath + ' > ' + error);\n      if (typeof this.options.onWarning === 'function') {\n        this.options.onWarning.call(this, error, filepath);\n      }\n    };\n    let doc;\n    try {\n      doc = yaml.load(data, {\n        onWarning: onWarning\n      });\n    } catch (error) {\n      const findNumber = error.message.match(FIND_LINENUMBER);\n      const lineNumber = findNumber && findNumber.length > 0 ? findNumber[1] : 'unknown';\n      this.errored(`Failed to load the Yaml file \"${filepath}:${lineNumber}\"\\n${error.message}`);\n      console.error(`${filepath}:${lineNumber}\\n${error.message}`);\n      return null;\n    }\n    return doc;\n  }\n\n  /**\n   * Read and parse the given Yaml file.\n   * @param {string} filepath Yaml file path\n   * @returns {string|null} Parsed Yaml or null on failure\n   */\n  loadFile(filepath) {\n    // Verbose output will tell which file is being read\n    let data;\n    const _self = this;\n    try {\n      data = fs.readFileSync(filepath, 'utf8');\n    } catch (err) {\n      _self.errored(filepath + ' > No such file or directory');\n      return null;\n    }\n    return this.loadData(filepath, data);\n  }\n\n  /**\n   * Read the given Yaml file, load and check its structure.\n   * @param {string} filepath Yaml file path\n   * @returns {number} 0 when no errors, 1 when errors.\n   */\n  checkFile(filepath) {\n    const doc = this.loadFile(filepath);\n    if (!doc) {\n      return 1;\n    }\n    if (this.options.writeJson) {\n      const json = JSON.stringify(doc, null, '  ');\n      fs.writeFileSync(filepath.replace(/\\.y(a)?ml$/iu, '.json'), json, 'utf8');\n    }\n    if (this.options.structure) {\n      const nonValidPaths = this.validateStructure(doc, this.options.structure);\n      if (nonValidPaths.length > 0) {\n        this.errored(filepath + ' is not following the correct structure, missing:');\n        this.errored(nonValidPaths.join('\\n'));\n        this.nonValidPaths = this.nonValidPaths.concat(nonValidPaths);\n        return 1;\n      }\n    }\n    return 0;\n  }\n\n  /**\n   * Create a report out of this, but in reality also run.\n   * @param {array} files List of files that have been checked that they exist\n   * @returns {void}\n   */\n  validate(files) {\n    const _self = this;\n    this.inValidFilesCount = files.map(filepath => {\n      return _self.checkFile(filepath);\n    }).reduce((prev, curr) => {\n      return prev + curr;\n    }, _self.inValidFilesCount);\n  }\n\n  /**\n   * Create a report out of this, but in reality also run.\n   * @returns {number} 0 when no errors, the count of invalid files otherwise.\n   */\n  report() {\n    if (this.inValidFilesCount > 0) {\n      this.errored('Yaml format related errors in ' + this.inValidFilesCount + ' files');\n    }\n    const len = this.nonValidPaths.length;\n    this.errored('Total of ' + len + ' structure validation error(s)');\n    if (typeof this.options.log === 'string') {\n      fs.writeFileSync(this.options.log, this.logs.join('\\n'), 'utf8');\n    }\n    return this.inValidFilesCount;\n  }\n}\nmodule.exports = YamlValidatore;","map":{"version":3,"names":["fs","require","yaml","check","init","FIND_LINENUMBER","YamlValidatore","constructor","options","Object","assign","log","structure","onWarning","writeJson","logs","nonValidPaths","inValidFilesCount","errored","msg","push","validateStructure","doc","parent","notFound","current","notValid","keys","forEach","originKey","optional","endsWith","key","replace","is","length","item","Array","has","child","index","concat","filter","filterFalse","loadData","filepath","data","error","call","load","findNumber","message","match","lineNumber","console","loadFile","_self","readFileSync","err","checkFile","json","JSON","stringify","writeFileSync","join","validate","files","map","reduce","prev","curr","report","len","module","exports"],"sources":["/Users/jhazzatgmail.com/Documents/moorseapp/node_modules/yaml-validator/index.js"],"sourcesContent":["/**\n * yaml-validator\n * https://github.com/paazmaya/yaml-validator\n *\n * Copyright (c) Juga Paazmaya <paazmaya@yahoo.com> (https://paazmaya.fi)\n * Licensed under the MIT license.\n */\n\nconst fs = require('fs');\n\nconst yaml = require('js-yaml');\nconst check = require('check-type').init();\n\nconst FIND_LINENUMBER = /line (\\d+)/u;\n\nclass YamlValidatore {\n  constructor (options) {\n    this.options = Object.assign({\n      log: false,\n      structure: false,\n      onWarning: null,\n      writeJson: false\n    }, options);\n\n    this.logs = [];\n    this.nonValidPaths = []; // list of property paths\n    this.inValidFilesCount = 0;\n  }\n\n  /**\n   * Store log messages\n   * possible later use by writing a log file.\n   * @param {string} msg Error message\n   * @returns {void}\n   */\n  errored(msg) {\n    this.logs.push(msg);\n  }\n\n  /**\n   * Check that the given structure is available.\n   * @param {Object} doc Object loaded from Yaml file\n   * @param {Object} structure Structure requirements\n   * @param {string} parent Address in a dot notation\n   * @returns {Array} List of not found structure paths\n   */\n  validateStructure(doc, structure, parent) {\n    let notFound = [],\n      current = '',\n      notValid; // false or path\n\n    parent = parent || '';\n\n    Object.keys(structure).forEach((originKey) => {\n      const optional = originKey.endsWith('?');\n      const key = originKey.replace(/\\?$/u, '');\n\n      current = parent;\n      if (!check(structure).is('Array')) {\n        current += (parent.length > 0 ?\n          '.' :\n          '') + key;\n      }\n\n      const item = structure[originKey];\n      if (item instanceof Array) {\n        if (check(doc).has(key) && check(doc[key]).is('Array')) {\n          doc[key].forEach((child, index) => {\n            if (item.length > 1) {\n              notValid = this.validateStructure([child], [item[index]], current + '[' + index + ']');\n            }\n            else {\n              notValid = this.validateStructure([child], item, current + '[' + index + ']');\n            }\n            notFound = notFound.concat(notValid);\n          });\n        }\n        else if (!optional) {\n          notFound.push(current);\n        }\n      }\n      else if (typeof item === 'string') {\n        if (!check(doc).has(key) && optional){\n          notValid = false;\n        }\n        else {\n          notValid = !((check(structure).is('Array') || check(doc).has(key)) && check(doc[key]).is(item));\n        }\n\n        // Key can be a index number when the structure is an array, but passed as a string\n        notFound.push(notValid ?\n          current :\n          false);\n      }\n      else if (typeof item === 'object' && item !== null) {\n        if (!optional) {\n          notValid = this.validateStructure(doc[key], item, current);\n          notFound = notFound.concat(notValid);\n        }\n      }\n    });\n\n    return notFound.filter(function filterFalse(item) {\n      return item !== false;\n    });\n  }\n\n  /**\n   * Parse the given Yaml data.\n   * @param {string} filepath Yaml file path\n   * @param {string} data Yaml data\n   * @returns {string|null} Parsed Yaml or null on failure\n   */\n  loadData(filepath, data) {\n    const onWarning = (error) => {\n      this.errored(filepath + ' > ' + error);\n      if (typeof this.options.onWarning === 'function') {\n        this.options.onWarning.call(this, error, filepath);\n      }\n    };\n    let doc;\n\n    try {\n      doc = yaml.load(data, {\n        onWarning: onWarning\n      });\n    }\n    catch (error) {\n      const findNumber = error.message.match(FIND_LINENUMBER);\n      const lineNumber = findNumber && findNumber.length > 0 ?\n        findNumber[1] :\n        'unknown';\n      this.errored(`Failed to load the Yaml file \"${filepath}:${lineNumber}\"\\n${error.message}`);\n      console.error(`${filepath}:${lineNumber}\\n${error.message}`);\n\n      return null;\n    }\n\n    return doc;\n  }\n\n  /**\n   * Read and parse the given Yaml file.\n   * @param {string} filepath Yaml file path\n   * @returns {string|null} Parsed Yaml or null on failure\n   */\n  loadFile(filepath) {\n    // Verbose output will tell which file is being read\n    let data;\n    const _self = this;\n\n    try {\n      data = fs.readFileSync(filepath, 'utf8');\n    }\n    catch (err) {\n      _self.errored(filepath + ' > No such file or directory');\n\n      return null;\n    }\n\n    return this.loadData(filepath, data);\n  }\n\n  /**\n   * Read the given Yaml file, load and check its structure.\n   * @param {string} filepath Yaml file path\n   * @returns {number} 0 when no errors, 1 when errors.\n   */\n  checkFile(filepath) {\n    const doc = this.loadFile(filepath);\n\n    if (!doc) {\n      return 1;\n    }\n\n    if (this.options.writeJson) {\n      const json = JSON.stringify(doc, null, '  ');\n      fs.writeFileSync(filepath.replace(/\\.y(a)?ml$/iu, '.json'), json, 'utf8');\n    }\n\n    if (this.options.structure) {\n      const nonValidPaths = this.validateStructure(doc, this.options.structure);\n\n      if (nonValidPaths.length > 0) {\n        this.errored(filepath + ' is not following the correct structure, missing:');\n        this.errored(nonValidPaths.join('\\n'));\n        this.nonValidPaths = this.nonValidPaths.concat(nonValidPaths);\n\n        return 1;\n      }\n    }\n\n    return 0;\n  }\n\n  /**\n   * Create a report out of this, but in reality also run.\n   * @param {array} files List of files that have been checked that they exist\n   * @returns {void}\n   */\n  validate(files) {\n    const _self = this;\n    this.inValidFilesCount = files.map((filepath) => {\n      return _self.checkFile(filepath);\n    }).reduce((prev, curr) => {\n      return prev + curr;\n    }, _self.inValidFilesCount);\n  }\n\n  /**\n   * Create a report out of this, but in reality also run.\n   * @returns {number} 0 when no errors, the count of invalid files otherwise.\n   */\n  report() {\n\n    if (this.inValidFilesCount > 0) {\n      this.errored('Yaml format related errors in ' + this.inValidFilesCount + ' files');\n    }\n\n    const len = this.nonValidPaths.length;\n    this.errored('Total of ' + len + ' structure validation error(s)');\n\n    if (typeof this.options.log === 'string') {\n      fs.writeFileSync(this.options.log, this.logs.join('\\n'), 'utf8');\n    }\n\n    return this.inValidFilesCount;\n  }\n}\n\nmodule.exports = YamlValidatore;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}