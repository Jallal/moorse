{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport * as React from 'react';\nimport { classNames, Draggable, Icon, Keys } from '@progress/kendo-react-common';\n/**\n * @hidden\n */\nvar SplitterBar = /** @class */function (_super) {\n  __extends(SplitterBar, _super);\n  function SplitterBar(props) {\n    var _this = _super.call(this, props) || this;\n    _this.draggable = null;\n    _this.onDrag = function (data, isFirst, isLast) {\n      var event = data.event;\n      var _a = _this.props,\n        onDrag = _a.onDrag,\n        index = _a.index;\n      var element = _this.draggable && _this.draggable.element;\n      if (element && !_this.isStatic && _this.isDraggable) {\n        onDrag(event, element, index, isFirst, isLast);\n      }\n    };\n    _this.onFocus = function () {\n      _this.setState({\n        focused: true\n      });\n    };\n    _this.onBlur = function () {\n      _this.setState({\n        focused: false\n      });\n    };\n    _this.onToggle = function (event) {\n      var _a = _this.props,\n        onToggle = _a.onToggle,\n        index = _a.index,\n        prev = _a.prev,\n        next = _a.next;\n      if (prev.collapsible || next.collapsible) {\n        onToggle(prev.collapsible ? index : index + 1, event);\n      }\n    };\n    _this.onPrevToggle = function (event) {\n      var _a = _this.props,\n        onToggle = _a.onToggle,\n        index = _a.index,\n        prev = _a.prev;\n      if (prev.collapsible) {\n        onToggle(index, event);\n      }\n    };\n    _this.onNextToggle = function (event) {\n      var _a = _this.props,\n        onToggle = _a.onToggle,\n        index = _a.index,\n        next = _a.next;\n      if (next.collapsible) {\n        onToggle(index + 1, event);\n      }\n    };\n    _this.onKeyDown = function (event) {\n      var keyCode = event && event.keyCode;\n      var isHorizontal = _this.isHorizontal;\n      var index = _this.props.index;\n      var element = _this.draggable && _this.draggable.element;\n      var onKeyboardResize = function onKeyboardResize(el, idx, offset) {\n        event.preventDefault();\n        _this.props.onKeyboardResize(el, idx, offset, event);\n      };\n      if (!element) {\n        return;\n      }\n      if (keyCode === Keys.enter) {\n        event.preventDefault();\n        _this.onToggle(event);\n      } else if (_this.isDraggable) {\n        if (isHorizontal && keyCode === Keys.left) {\n          onKeyboardResize(element, index, -10);\n        } else if (isHorizontal && keyCode === Keys.right) {\n          onKeyboardResize(element, index, 10);\n        } else if (!isHorizontal && keyCode === Keys.up) {\n          onKeyboardResize(element, index, -10);\n        } else if (!isHorizontal && keyCode === Keys.down) {\n          onKeyboardResize(element, index, 10);\n        }\n      }\n    };\n    _this.state = {\n      focused: false\n    };\n    return _this;\n  }\n  Object.defineProperty(SplitterBar.prototype, \"isStatic\", {\n    get: function get() {\n      var _a = this.props,\n        prev = _a.prev,\n        next = _a.next;\n      var betweenResizablePanes = prev.resizable && next.resizable;\n      var nearCollapsiblePane = prev.collapsible || next.collapsible;\n      return !betweenResizablePanes && !nearCollapsiblePane;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SplitterBar.prototype, \"isDraggable\", {\n    get: function get() {\n      var _a = this.props,\n        prev = _a.prev,\n        next = _a.next;\n      var betweenResizablePanes = prev.resizable && next.resizable;\n      var nearCollapsedPane = prev.collapsed || next.collapsed;\n      return !!betweenResizablePanes && !nearCollapsedPane;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SplitterBar.prototype, \"isHorizontal\", {\n    get: function get() {\n      return this.props.orientation === 'horizontal';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  SplitterBar.prototype.render = function () {\n    var _a;\n    var _this = this;\n    var isDraggable = this.isDraggable;\n    var isStatic = this.isStatic;\n    var isHorizontal = this.isHorizontal;\n    var barClasses = classNames('k-splitbar', (_a = {}, _a['k-focus'] = this.state.focused, _a['k-splitbar-horizontal'] = isHorizontal, _a['k-splitbar-vertical'] = !isHorizontal, _a['k-splitbar-draggable-horizontal'] = isHorizontal && isDraggable, _a['k-splitbar-draggable-vertical'] = !isHorizontal && isDraggable, _a['k-splitbar-static-horizontal'] = isHorizontal && isStatic, _a['k-splitbar-static-vertical'] = !isHorizontal && isStatic, _a));\n    return React.createElement(Draggable, {\n      onPress: function onPress(event) {\n        return _this.onDrag(event, true, false);\n      },\n      onDrag: function onDrag(event) {\n        return _this.onDrag(event, false, false);\n      },\n      onRelease: function onRelease(event) {\n        return _this.onDrag(event, false, true);\n      },\n      ref: function ref(component) {\n        _this.draggable = component;\n      }\n    }, React.createElement(\"div\", {\n      tabIndex: isStatic ? -1 : 0,\n      role: 'separator',\n      className: barClasses,\n      style: {\n        touchAction: 'none'\n      },\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      onDoubleClick: this.onToggle,\n      onKeyDown: this.onKeyDown\n    }, this.props.prev.collapsible && React.createElement(\"div\", {\n      className: 'k-collapse-prev',\n      onClick: this.onPrevToggle\n    }, React.createElement(Icon, {\n      name: this.props.prev.collapsible ? isHorizontal ? this.props.prev.collapsed ? 'caret-alt-right' : 'caret-alt-left' : this.props.prev.collapsed ? 'caret-alt-down' : 'caret-alt-up' : undefined\n    })), React.createElement(\"div\", {\n      className: 'k-resize-handle'\n    }), this.props.next.collapsible && React.createElement(\"div\", {\n      className: 'k-collapse-next',\n      onClick: this.onNextToggle\n    }, React.createElement(Icon, {\n      name: this.props.next.collapsible ? isHorizontal ? this.props.next.collapsed ? 'caret-alt-left' : 'caret-alt-right' : this.props.next.collapsed ? 'caret-alt-up' : 'caret-alt-down' : undefined\n    }))));\n  };\n  return SplitterBar;\n}(React.Component);\nexport { SplitterBar };","map":null,"metadata":{},"sourceType":"module"}