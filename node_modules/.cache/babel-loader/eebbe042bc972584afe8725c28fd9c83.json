{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames, Keys } from '@progress/kendo-react-common';\nimport { toolbarButtons } from './../util';\nimport { validatePackage } from '@progress/kendo-react-common';\nimport { packageMetadata } from '../package-metadata';\n/**\n * Represents the [KendoReact Toolbar component]({% slug overview_toolbar %}).\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *    render() {\n *       return (\n *          <Toolbar>\n *              <ToolbarItem>\n *                  <ButtonGroup>\n *                      <Button togglable={true} icon=\"bold\" />\n *                      <Button togglable={true} icon=\"italic\" />\n *                      <Button togglable={true} icon=\"underline\" />\n *                  </ButtonGroup>\n *              </ToolbarItem>\n *              <ToolbarItem>\n *                  <ButtonGroup>\n *                      <Button icon=\"hyperlink\">Insert Link</Button>\n *                      <Button icon=\"image\">Insert Image</Button>\n *                      <Button icon=\"table\">Insert Table</Button>\n *                  </ButtonGroup>\n *              </ToolbarItem>\n *          </Toolbar>\n *       );\n *    }\n * }\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nvar Toolbar = /** @class */function (_super) {\n  __extends(Toolbar, _super);\n  function Toolbar(props) {\n    var _this = _super.call(this, props) || this;\n    _this._element = null;\n    _this.offsetHeight = 0;\n    _this.offsetWidth = 0;\n    _this.buttons = [];\n    _this.focusedSelector = _this.selectors.map(function (s) {\n      return s + ':focus';\n    }).join(',');\n    _this.setTabIndex = function (focusedIndex) {\n      var _a = _this.props.tabIndex,\n        tabIndex = _a === void 0 ? Toolbar.defaultProps.tabIndex : _a;\n      _this.buttons.forEach(function (button, index) {\n        button.tabIndex = index === focusedIndex ? tabIndex : -1;\n      });\n    };\n    _this.onKeyDown = function (event) {\n      var target = event.target;\n      var arrowKey = event.keyCode === Keys.left || event.keyCode === Keys.right;\n      if (!arrowKey || event.defaultPrevented || _this.buttons.findIndex(function (b) {\n        return b === target;\n      }) === -1) {\n        return;\n      }\n      var focusedIndex = _this.focusedIndex;\n      if (event.keyCode === Keys.left) {\n        _this.focusButton(focusedIndex, focusedIndex - 1);\n      } else {\n        _this.focusButton(focusedIndex, focusedIndex + 1);\n      }\n    };\n    _this.onWindowResize = function (event) {\n      var element = _this.element;\n      if (!element) {\n        return;\n      }\n      var offsetWidth = element.offsetWidth;\n      var offsetHeight = element.offsetHeight;\n      if (_this.offsetWidth !== offsetWidth || _this.offsetHeight !== offsetHeight) {\n        _this.offsetWidth = offsetWidth;\n        _this.offsetHeight = offsetHeight;\n        var newSizes = {\n          offsetWidth: _this.offsetWidth,\n          offsetHeight: _this.offsetHeight\n        };\n        if (_this.props.onResize) {\n          _this.props.onResize.call(undefined, __assign(__assign({\n            target: _this\n          }, newSizes), {\n            nativeEvent: event\n          }));\n        }\n      }\n    };\n    validatePackage(packageMetadata);\n    return _this;\n  }\n  Object.defineProperty(Toolbar.prototype, \"selectors\", {\n    get: function get() {\n      return this.props.buttons || toolbarButtons;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Toolbar.prototype, \"focusedIndex\", {\n    get: function get() {\n      var focused = this.element && this.element.querySelector(this.focusedSelector);\n      return Math.max(0, this.buttons.findIndex(function (e) {\n        return e === focused;\n      }));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Toolbar.prototype, \"element\", {\n    /**\n     * Returns the HTML element of the Toolbar component.\n     */\n    get: function get() {\n      return this._element;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n  Toolbar.prototype.componentDidMount = function () {\n    window.addEventListener('resize', this.onWindowResize);\n    var element = this.element;\n    if (element) {\n      this.offsetWidth = element.offsetWidth;\n      this.offsetHeight = element.offsetHeight;\n      if (this.props.keyboardNavigation !== false) {\n        this.buttons = Array.from(element.querySelectorAll(this.selectors.join(',')));\n        this.setTabIndex(0);\n      }\n    }\n  };\n  /**\n   * @hidden\n   */\n  Toolbar.prototype.componentDidUpdate = function () {\n    var element = this.element;\n    if (!element || this.props.keyboardNavigation === false) {\n      return;\n    }\n    this.buttons = Array.from(element.querySelectorAll(this.selectors.join(',')));\n    this.setTabIndex(this.focusedIndex);\n  };\n  /**\n   * @hidden\n   */\n  Toolbar.prototype.componentWillUnmount = function () {\n    window.removeEventListener('resize', this.onWindowResize);\n    this.buttons.length = 0;\n  };\n  /**\n   * @hidden\n   */\n  Toolbar.prototype.render = function () {\n    var _this = this;\n    return React.createElement(\"div\", {\n      id: this.props.id,\n      className: classNames('k-widget k-toolbar', this.props.className),\n      style: this.props.style,\n      role: this.props.role !== undefined ? this.props.role || undefined : 'toolbar',\n      dir: this.props.dir,\n      ref: function ref(element) {\n        return _this._element = element;\n      },\n      onKeyDown: this.props.keyboardNavigation !== false ? this.onKeyDown : undefined\n    }, this.props.children);\n  };\n  Toolbar.prototype.focusButton = function (prevIndex, index) {\n    var _a = this.props.tabIndex,\n      tabIndex = _a === void 0 ? Toolbar.defaultProps.tabIndex : _a;\n    var button = this.buttons[index];\n    if (button) {\n      button.tabIndex = tabIndex;\n      button.focus();\n      var prevButton = this.buttons[prevIndex];\n      if (prevButton) {\n        prevButton.tabIndex = -1;\n      }\n    }\n  };\n  /**\n   * @hidden\n   */\n  Toolbar.propTypes = {\n    tabIndex: PropTypes.number,\n    dir: PropTypes.string,\n    keyboardNavigation: PropTypes.bool,\n    style: PropTypes.object,\n    className: PropTypes.string,\n    role: PropTypes.string,\n    onResize: PropTypes.func,\n    buttons: PropTypes.arrayOf(PropTypes.string)\n  };\n  /**\n   * @hidden\n   */\n  Toolbar.defaultProps = {\n    tabIndex: 0\n  };\n  return Toolbar;\n}(React.Component);\nexport { Toolbar };","map":null,"metadata":{},"sourceType":"module"}