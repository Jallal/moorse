{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from '../package-metadata';\nimport { classNames, guid } from '@progress/kendo-react-common';\n/**\n * Represents the [KendoReact StackLayout component]({% slug overview_stacklayout %}).\n * Arranges its inner elements horizontally, or vertically in a stack. Nesting stack layouts is supported to build more complex layouts.\n *\n * @example\n * ```jsx\n *\n * const App = () => {\n *   return (\n *     <StackLayout\n *       orientation=\"vertical\"\n *       align={{horizontal: 'stretch', vertical: 'stretch'}}\n *       gap={10}\n *     >\n *       <div>Box</div>\n *       <div>Box</div>\n *       <div>Box</div>\n *       <div>Box</div>\n *     </StackLayout>\n *   );\n * };\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nexport var StackLayout = React.forwardRef(function (props, ref) {\n  validatePackage(packageMetadata);\n  var elementRef = React.useRef(null);\n  var getImperativeHandle = React.useCallback(function () {\n    return {\n      element: elementRef.current\n    };\n  }, []);\n  React.useImperativeHandle(ref, getImperativeHandle);\n  var className = props.className,\n    style = props.style,\n    id = props.id,\n    children = props.children;\n  var layoutId = React.useMemo(function () {\n    return guid();\n  }, []);\n  var orientation = React.useMemo(function () {\n    return props.orientation || defaultProps.orientation;\n  }, [props.orientation]);\n  var isHorizontal = orientation === 'horizontal';\n  var hAlign = React.useMemo(function () {\n    return props.align && props.align.horizontal ? props.align.horizontal : defaultProps.hAlign;\n  }, [props.align]);\n  var vAlign = React.useMemo(function () {\n    return props.align && props.align.vertical ? props.align.vertical : defaultProps.vAlign;\n  }, [props.align]);\n  var stackLayoutClasses = React.useMemo(function () {\n    return classNames('k-stack-layout', {\n      'k-hstack': orientation === 'horizontal',\n      'k-vstack': orientation === 'vertical',\n      'k-justify-content-start': isHorizontal && hAlign === 'start' || !isHorizontal && vAlign === 'top',\n      'k-justify-content-center': isHorizontal && hAlign === 'center' || !isHorizontal && vAlign === 'middle',\n      'k-justify-content-end': isHorizontal && hAlign === 'end' || !isHorizontal && vAlign === 'bottom',\n      'k-justify-content-stretch': isHorizontal && hAlign === 'stretch' || !isHorizontal && vAlign === 'stretch',\n      'k-align-items-start': !isHorizontal && hAlign === 'start' || isHorizontal && vAlign === 'top',\n      'k-align-items-center': !isHorizontal && hAlign === 'center' || isHorizontal && vAlign === 'middle',\n      'k-align-items-end': !isHorizontal && hAlign === 'end' || isHorizontal && vAlign === 'bottom',\n      'k-align-items-stretch': !isHorizontal && hAlign === 'stretch' || isHorizontal && vAlign === 'stretch'\n    }, className);\n  }, [orientation, isHorizontal, hAlign, vAlign, className]);\n  var stackLayoutStyles = __assign({\n    gap: \"\".concat(typeof props.gap === 'number' ? props.gap + 'px' : props.gap)\n  }, style);\n  return React.createElement(\"div\", {\n    ref: elementRef,\n    className: stackLayoutClasses,\n    style: stackLayoutStyles,\n    id: id || layoutId\n  }, children);\n});\nvar defaultProps = {\n  orientation: 'horizontal',\n  hAlign: 'stretch',\n  vAlign: 'stretch'\n};\nStackLayout.propTypes = {\n  className: PropTypes.string,\n  style: PropTypes.object,\n  children: PropTypes.any,\n  id: PropTypes.string,\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  gap: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  align: PropTypes.shape({\n    vertical: PropTypes.oneOf(['top', 'middle', 'bottom', 'stretch']),\n    horizontal: PropTypes.oneOf(['start', 'center', 'end', 'stretch'])\n  })\n};\nStackLayout.defaultProps = defaultProps;\nStackLayout.displayName = 'KendoReactStackLayout';","map":null,"metadata":{},"sourceType":"module"}