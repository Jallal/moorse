{"ast":null,"code":"import { isPair } from '../nodes/Node.js';\nimport { Pair } from '../nodes/Pair.js';\nimport { YAMLMap } from '../nodes/YAMLMap.js';\nimport { YAMLSeq } from '../nodes/YAMLSeq.js';\nimport { resolveEnd } from './resolve-end.js';\nimport { resolveProps } from './resolve-props.js';\nimport { containsNewline } from './util-contains-newline.js';\nimport { mapIncludes } from './util-map-includes.js';\nconst blockMsg = 'Block collections are not allowed within flow collections';\nconst isBlock = token => token && (token.type === 'block-map' || token.type === 'block-seq');\nfunction resolveFlowCollection(_ref, ctx, fc, onError) {\n  let {\n    composeNode,\n    composeEmptyNode\n  } = _ref;\n  const isMap = fc.start.source === '{';\n  const fcName = isMap ? 'flow map' : 'flow sequence';\n  const coll = isMap ? new YAMLMap(ctx.schema) : new YAMLSeq(ctx.schema);\n  coll.flow = true;\n  const atRoot = ctx.atRoot;\n  if (atRoot) ctx.atRoot = false;\n  let offset = fc.offset + fc.start.source.length;\n  for (let i = 0; i < fc.items.length; ++i) {\n    const collItem = fc.items[i];\n    const {\n      start,\n      key,\n      sep,\n      value\n    } = collItem;\n    const props = resolveProps(start, {\n      flow: fcName,\n      indicator: 'explicit-key-ind',\n      next: key ?? sep?.[0],\n      offset,\n      onError,\n      startOnNewline: false\n    });\n    if (!props.found) {\n      if (!props.anchor && !props.tag && !sep && !value) {\n        if (i === 0 && props.comma) onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);else if (i < fc.items.length - 1) onError(props.start, 'UNEXPECTED_TOKEN', `Unexpected empty item in ${fcName}`);\n        if (props.comment) {\n          if (coll.comment) coll.comment += '\\n' + props.comment;else coll.comment = props.comment;\n        }\n        offset = props.end;\n        continue;\n      }\n      if (!isMap && ctx.options.strict && containsNewline(key)) onError(key,\n      // checked by containsNewline()\n      'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');\n    }\n    if (i === 0) {\n      if (props.comma) onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);\n    } else {\n      if (!props.comma) onError(props.start, 'MISSING_CHAR', `Missing , between ${fcName} items`);\n      if (props.comment) {\n        let prevItemComment = '';\n        loop: for (const st of start) {\n          switch (st.type) {\n            case 'comma':\n            case 'space':\n              break;\n            case 'comment':\n              prevItemComment = st.source.substring(1);\n              break loop;\n            default:\n              break loop;\n          }\n        }\n        if (prevItemComment) {\n          let prev = coll.items[coll.items.length - 1];\n          if (isPair(prev)) prev = prev.value ?? prev.key;\n          if (prev.comment) prev.comment += '\\n' + prevItemComment;else prev.comment = prevItemComment;\n          props.comment = props.comment.substring(prevItemComment.length + 1);\n        }\n      }\n    }\n    if (!isMap && !sep && !props.found) {\n      // item is a value in a seq\n      // â†’ key & sep are empty, start does not include ? or :\n      const valueNode = value ? composeNode(ctx, value, props, onError) : composeEmptyNode(ctx, props.end, sep, null, props, onError);\n      coll.items.push(valueNode);\n      offset = valueNode.range[2];\n      if (isBlock(value)) onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);\n    } else {\n      // item is a key+value pair\n      // key value\n      const keyStart = props.end;\n      const keyNode = key ? composeNode(ctx, key, props, onError) : composeEmptyNode(ctx, keyStart, start, null, props, onError);\n      if (isBlock(key)) onError(keyNode.range, 'BLOCK_IN_FLOW', blockMsg);\n      // value properties\n      const valueProps = resolveProps(sep ?? [], {\n        flow: fcName,\n        indicator: 'map-value-ind',\n        next: value,\n        offset: keyNode.range[2],\n        onError,\n        startOnNewline: false\n      });\n      if (valueProps.found) {\n        if (!isMap && !props.found && ctx.options.strict) {\n          if (sep) for (const st of sep) {\n            if (st === valueProps.found) break;\n            if (st.type === 'newline') {\n              onError(st, 'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');\n              break;\n            }\n          }\n          if (props.start < valueProps.found.offset - 1024) onError(valueProps.found, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit flow sequence key');\n        }\n      } else if (value) {\n        if ('source' in value && value.source && value.source[0] === ':') onError(value, 'MISSING_CHAR', `Missing space after : in ${fcName}`);else onError(valueProps.start, 'MISSING_CHAR', `Missing , or : between ${fcName} items`);\n      }\n      // value value\n      const valueNode = value ? composeNode(ctx, value, valueProps, onError) : valueProps.found ? composeEmptyNode(ctx, valueProps.end, sep, null, valueProps, onError) : null;\n      if (valueNode) {\n        if (isBlock(value)) onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);\n      } else if (valueProps.comment) {\n        if (keyNode.comment) keyNode.comment += '\\n' + valueProps.comment;else keyNode.comment = valueProps.comment;\n      }\n      const pair = new Pair(keyNode, valueNode);\n      if (ctx.options.keepSourceTokens) pair.srcToken = collItem;\n      if (isMap) {\n        const map = coll;\n        if (mapIncludes(ctx, map.items, keyNode)) onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');\n        map.items.push(pair);\n      } else {\n        const map = new YAMLMap(ctx.schema);\n        map.flow = true;\n        map.items.push(pair);\n        coll.items.push(map);\n      }\n      offset = valueNode ? valueNode.range[2] : valueProps.end;\n    }\n  }\n  const expectedEnd = isMap ? '}' : ']';\n  const [ce, ...ee] = fc.end;\n  let cePos = offset;\n  if (ce && ce.source === expectedEnd) cePos = ce.offset + ce.source.length;else {\n    const name = fcName[0].toUpperCase() + fcName.substring(1);\n    const msg = atRoot ? `${name} must end with a ${expectedEnd}` : `${name} in block collection must be sufficiently indented and end with a ${expectedEnd}`;\n    onError(offset, atRoot ? 'MISSING_CHAR' : 'BAD_INDENT', msg);\n    if (ce && ce.source.length !== 1) ee.unshift(ce);\n  }\n  if (ee.length > 0) {\n    const end = resolveEnd(ee, cePos, ctx.options.strict, onError);\n    if (end.comment) {\n      if (coll.comment) coll.comment += '\\n' + end.comment;else coll.comment = end.comment;\n    }\n    coll.range = [fc.offset, cePos, end.offset];\n  } else {\n    coll.range = [fc.offset, cePos, cePos];\n  }\n  return coll;\n}\nexport { resolveFlowCollection };","map":{"version":3,"names":["isPair","Pair","YAMLMap","YAMLSeq","resolveEnd","resolveProps","containsNewline","mapIncludes","blockMsg","isBlock","token","type","resolveFlowCollection","ctx","fc","onError","composeNode","composeEmptyNode","isMap","start","source","fcName","coll","schema","flow","atRoot","offset","length","i","items","collItem","key","sep","value","props","indicator","next","startOnNewline","found","anchor","tag","comma","comment","end","options","strict","prevItemComment","loop","st","substring","prev","valueNode","push","range","keyStart","keyNode","valueProps","pair","keepSourceTokens","srcToken","map","expectedEnd","ce","ee","cePos","name","toUpperCase","msg","unshift"],"sources":["/workspaces/moorse/node_modules/yaml/browser/dist/compose/resolve-flow-collection.js"],"sourcesContent":["import { isPair } from '../nodes/Node.js';\nimport { Pair } from '../nodes/Pair.js';\nimport { YAMLMap } from '../nodes/YAMLMap.js';\nimport { YAMLSeq } from '../nodes/YAMLSeq.js';\nimport { resolveEnd } from './resolve-end.js';\nimport { resolveProps } from './resolve-props.js';\nimport { containsNewline } from './util-contains-newline.js';\nimport { mapIncludes } from './util-map-includes.js';\n\nconst blockMsg = 'Block collections are not allowed within flow collections';\nconst isBlock = (token) => token && (token.type === 'block-map' || token.type === 'block-seq');\nfunction resolveFlowCollection({ composeNode, composeEmptyNode }, ctx, fc, onError) {\n    const isMap = fc.start.source === '{';\n    const fcName = isMap ? 'flow map' : 'flow sequence';\n    const coll = isMap\n        ? new YAMLMap(ctx.schema)\n        : new YAMLSeq(ctx.schema);\n    coll.flow = true;\n    const atRoot = ctx.atRoot;\n    if (atRoot)\n        ctx.atRoot = false;\n    let offset = fc.offset + fc.start.source.length;\n    for (let i = 0; i < fc.items.length; ++i) {\n        const collItem = fc.items[i];\n        const { start, key, sep, value } = collItem;\n        const props = resolveProps(start, {\n            flow: fcName,\n            indicator: 'explicit-key-ind',\n            next: key ?? sep?.[0],\n            offset,\n            onError,\n            startOnNewline: false\n        });\n        if (!props.found) {\n            if (!props.anchor && !props.tag && !sep && !value) {\n                if (i === 0 && props.comma)\n                    onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);\n                else if (i < fc.items.length - 1)\n                    onError(props.start, 'UNEXPECTED_TOKEN', `Unexpected empty item in ${fcName}`);\n                if (props.comment) {\n                    if (coll.comment)\n                        coll.comment += '\\n' + props.comment;\n                    else\n                        coll.comment = props.comment;\n                }\n                offset = props.end;\n                continue;\n            }\n            if (!isMap && ctx.options.strict && containsNewline(key))\n                onError(key, // checked by containsNewline()\n                'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');\n        }\n        if (i === 0) {\n            if (props.comma)\n                onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);\n        }\n        else {\n            if (!props.comma)\n                onError(props.start, 'MISSING_CHAR', `Missing , between ${fcName} items`);\n            if (props.comment) {\n                let prevItemComment = '';\n                loop: for (const st of start) {\n                    switch (st.type) {\n                        case 'comma':\n                        case 'space':\n                            break;\n                        case 'comment':\n                            prevItemComment = st.source.substring(1);\n                            break loop;\n                        default:\n                            break loop;\n                    }\n                }\n                if (prevItemComment) {\n                    let prev = coll.items[coll.items.length - 1];\n                    if (isPair(prev))\n                        prev = prev.value ?? prev.key;\n                    if (prev.comment)\n                        prev.comment += '\\n' + prevItemComment;\n                    else\n                        prev.comment = prevItemComment;\n                    props.comment = props.comment.substring(prevItemComment.length + 1);\n                }\n            }\n        }\n        if (!isMap && !sep && !props.found) {\n            // item is a value in a seq\n            // â†’ key & sep are empty, start does not include ? or :\n            const valueNode = value\n                ? composeNode(ctx, value, props, onError)\n                : composeEmptyNode(ctx, props.end, sep, null, props, onError);\n            coll.items.push(valueNode);\n            offset = valueNode.range[2];\n            if (isBlock(value))\n                onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);\n        }\n        else {\n            // item is a key+value pair\n            // key value\n            const keyStart = props.end;\n            const keyNode = key\n                ? composeNode(ctx, key, props, onError)\n                : composeEmptyNode(ctx, keyStart, start, null, props, onError);\n            if (isBlock(key))\n                onError(keyNode.range, 'BLOCK_IN_FLOW', blockMsg);\n            // value properties\n            const valueProps = resolveProps(sep ?? [], {\n                flow: fcName,\n                indicator: 'map-value-ind',\n                next: value,\n                offset: keyNode.range[2],\n                onError,\n                startOnNewline: false\n            });\n            if (valueProps.found) {\n                if (!isMap && !props.found && ctx.options.strict) {\n                    if (sep)\n                        for (const st of sep) {\n                            if (st === valueProps.found)\n                                break;\n                            if (st.type === 'newline') {\n                                onError(st, 'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');\n                                break;\n                            }\n                        }\n                    if (props.start < valueProps.found.offset - 1024)\n                        onError(valueProps.found, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit flow sequence key');\n                }\n            }\n            else if (value) {\n                if ('source' in value && value.source && value.source[0] === ':')\n                    onError(value, 'MISSING_CHAR', `Missing space after : in ${fcName}`);\n                else\n                    onError(valueProps.start, 'MISSING_CHAR', `Missing , or : between ${fcName} items`);\n            }\n            // value value\n            const valueNode = value\n                ? composeNode(ctx, value, valueProps, onError)\n                : valueProps.found\n                    ? composeEmptyNode(ctx, valueProps.end, sep, null, valueProps, onError)\n                    : null;\n            if (valueNode) {\n                if (isBlock(value))\n                    onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);\n            }\n            else if (valueProps.comment) {\n                if (keyNode.comment)\n                    keyNode.comment += '\\n' + valueProps.comment;\n                else\n                    keyNode.comment = valueProps.comment;\n            }\n            const pair = new Pair(keyNode, valueNode);\n            if (ctx.options.keepSourceTokens)\n                pair.srcToken = collItem;\n            if (isMap) {\n                const map = coll;\n                if (mapIncludes(ctx, map.items, keyNode))\n                    onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');\n                map.items.push(pair);\n            }\n            else {\n                const map = new YAMLMap(ctx.schema);\n                map.flow = true;\n                map.items.push(pair);\n                coll.items.push(map);\n            }\n            offset = valueNode ? valueNode.range[2] : valueProps.end;\n        }\n    }\n    const expectedEnd = isMap ? '}' : ']';\n    const [ce, ...ee] = fc.end;\n    let cePos = offset;\n    if (ce && ce.source === expectedEnd)\n        cePos = ce.offset + ce.source.length;\n    else {\n        const name = fcName[0].toUpperCase() + fcName.substring(1);\n        const msg = atRoot\n            ? `${name} must end with a ${expectedEnd}`\n            : `${name} in block collection must be sufficiently indented and end with a ${expectedEnd}`;\n        onError(offset, atRoot ? 'MISSING_CHAR' : 'BAD_INDENT', msg);\n        if (ce && ce.source.length !== 1)\n            ee.unshift(ce);\n    }\n    if (ee.length > 0) {\n        const end = resolveEnd(ee, cePos, ctx.options.strict, onError);\n        if (end.comment) {\n            if (coll.comment)\n                coll.comment += '\\n' + end.comment;\n            else\n                coll.comment = end.comment;\n        }\n        coll.range = [fc.offset, cePos, end.offset];\n    }\n    else {\n        coll.range = [fc.offset, cePos, cePos];\n    }\n    return coll;\n}\n\nexport { resolveFlowCollection };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}