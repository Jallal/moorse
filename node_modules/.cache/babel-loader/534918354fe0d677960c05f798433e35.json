{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { TabStripNavigationItem } from './TabStripNavigationItem';\nimport { classNames } from '@progress/kendo-react-common';\nimport { Button } from '@progress/kendo-react-buttons';\n/**\n * @hidden\n */\nvar times = function times(count) {\n  return Array.apply(null, Array(count));\n};\nvar preventDefault = function preventDefault(e) {\n  return e.preventDefault();\n};\nvar DEFAULT_SCROLL_BEHAVIOR = 'smooth';\nvar PREV = 'prev';\nvar NEXT = 'next';\nvar TabStripNavigation = /** @class */function (_super) {\n  __extends(TabStripNavigation, _super);\n  function TabStripNavigation(props) {\n    var _this = _super.call(this, props) || this;\n    _this.itemsNavRef = React.createRef();\n    _this.onWheel = function (event) {\n      event.stopPropagation();\n      var direction = event.deltaY < 0 ? PREV : NEXT;\n      _this.setNewScrollPosition(direction, event);\n    };\n    _this.arrowClickPrev = function (e) {\n      _this.handleArrowClick(PREV, e);\n    };\n    _this.arrowClickNext = function (e) {\n      _this.handleArrowClick(NEXT, e);\n    };\n    _this.handleArrowClick = function (direction, e) {\n      _this.setNewScrollPosition(direction, e);\n    };\n    _this.setNewScrollPosition = function (direction, e) {\n      var list = _this.itemsNavRef.current;\n      if (!list) {\n        return;\n      }\n      var horizontal = _this.horizontalScroll();\n      var scrollEnd = horizontal ? list.scrollWidth - list.offsetWidth : list.scrollHeight - list.offsetHeight;\n      var increment = (e.type === 'click' ? _this.props.buttonScrollSpeed : _this.props.mouseScrollSpeed) || 0;\n      var prevScrollPosition = horizontal ? list.scrollLeft : list.scrollTop;\n      if (direction === PREV && prevScrollPosition > 0) {\n        prevScrollPosition -= increment;\n      }\n      if (direction === NEXT && prevScrollPosition < scrollEnd) {\n        prevScrollPosition += increment;\n      }\n      prevScrollPosition = Math.max(0, Math.min(scrollEnd, prevScrollPosition));\n      if (horizontal) {\n        list.scrollTo({\n          left: prevScrollPosition\n        });\n        _this.setState({\n          disabledPrev: prevScrollPosition === 0,\n          disabledNext: Math.round(list.scrollWidth - list.scrollLeft) === list.clientWidth || Math.floor(list.scrollWidth - list.scrollLeft) === list.clientWidth\n        });\n      } else {\n        list.scrollTo({\n          top: prevScrollPosition\n        });\n        _this.setState({\n          disabledPrev: prevScrollPosition === 0,\n          disabledNext: Math.round(list.scrollHeight - list.scrollTop) === list.clientHeight || Math.floor(list.scrollHeight - list.scrollTop) === list.clientHeight\n        });\n      }\n    };\n    _this.renderArrow = function (type, disabled) {\n      var horizontal = _this.horizontalScroll();\n      var directions = {\n        prev: {\n          arrowTab: 'k-tabstrip-prev',\n          arrow: horizontal ? 'caret-alt-left' : 'caret-alt-up'\n        },\n        next: {\n          arrowTab: 'k-tabstrip-next',\n          arrow: horizontal ? 'caret-alt-right' : 'caret-alt-down'\n        }\n      };\n      var ButtonComponent = (type === PREV ? _this.props.prevButton : _this.props.nextButton) || Button;\n      var onClick = type === PREV ? _this.arrowClickPrev : _this.arrowClickNext;\n      return React.createElement(ButtonComponent, {\n        disabled: disabled,\n        className: \"\".concat(directions[type].arrowTab),\n        onClick: onClick,\n        icon: directions[type].arrow,\n        onMouseDown: preventDefault,\n        tabIndex: -1,\n        fillMode: \"flat\"\n      });\n    };\n    _this.state = {\n      disabledPrev: _this.props.selected === 0,\n      disabledNext: _this.props.selected === React.Children.count(_this.props.children) - 1\n    };\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n  TabStripNavigation.prototype.componentDidMount = function () {\n    if (this.props.scrollable) {\n      this.scrollToSelected();\n    }\n  };\n  /**\n   * @hidden\n   */\n  TabStripNavigation.prototype.componentDidUpdate = function (prevProps) {\n    var _a = this.props,\n      scrollable = _a.scrollable,\n      selected = _a.selected;\n    if (scrollable && prevProps.selected !== selected) {\n      this.scrollToSelected();\n      this.setState({\n        disabledPrev: selected === 0,\n        disabledNext: selected === React.Children.count(this.props.children) - 1\n      });\n    }\n  };\n  /**\n   * @hidden\n   */\n  TabStripNavigation.prototype.render = function () {\n    var _a = this.props,\n      selected = _a.selected,\n      tabPosition = _a.tabPosition,\n      children = _a.children,\n      onSelect = _a.onSelect,\n      onKeyDown = _a.onKeyDown;\n    var tabsCount = React.Children.count(children);\n    var childElements = React.Children.toArray(children);\n    var tabs;\n    if (children) {\n      tabs = times(tabsCount).map(function (_, index, array) {\n        var tabProps = {\n          active: selected === index,\n          disabled: childElements[index].props.disabled,\n          index: index,\n          title: childElements[index].props.title,\n          first: index === 0,\n          last: index === array.length - 1,\n          onSelect: onSelect\n        };\n        return React.createElement(TabStripNavigationItem, __assign({\n          key: index\n        }, tabProps));\n      });\n    }\n    var wrapperClasses = classNames('k-tabstrip-items-wrapper', {\n      'k-hstack': tabPosition === 'top' || tabPosition === 'bottom',\n      'k-vstack': tabPosition === 'left' || tabPosition === 'right'\n    });\n    var navClasses = classNames('k-tabstrip-items', 'k-reset');\n    return React.createElement(\"div\", {\n      className: wrapperClasses\n    }, this.props.scrollable ? React.createElement(React.Fragment, null, this.renderArrow(PREV, this.state.disabledPrev), React.createElement(\"ul\", {\n      ref: this.itemsNavRef,\n      className: navClasses,\n      role: 'tablist',\n      tabIndex: this.props.tabIndex,\n      onKeyDown: onKeyDown,\n      onWheel: this.onWheel\n    }, tabs), this.renderArrow(NEXT, this.state.disabledNext)) : React.createElement(\"ul\", {\n      className: navClasses,\n      role: 'tablist',\n      tabIndex: this.props.tabIndex,\n      onKeyDown: onKeyDown\n    }, tabs));\n  };\n  TabStripNavigation.prototype.scrollToSelected = function () {\n    var _a, _b;\n    var list = this.itemsNavRef.current;\n    var tab = list && list.children[this.props.selected || 0];\n    if (tab instanceof HTMLElement && list instanceof HTMLElement) {\n      var horizontal = this.horizontalScroll();\n      var currentScrollOffset = horizontal ? list.scrollLeft : list.scrollTop;\n      var listSize = horizontal ? list.offsetWidth : list.offsetHeight;\n      var tabOffset = horizontal ? tab.offsetLeft - list.offsetLeft : tab.offsetTop - list.offsetTop;\n      var tabSize = horizontal ? tab.offsetWidth : tab.offsetHeight;\n      var scrollDir = horizontal ? 'left' : 'top';\n      var scrollPosition = 0;\n      if (currentScrollOffset + listSize < tabOffset + tabSize) {\n        scrollPosition = tabOffset + tabSize - listSize;\n        list.scrollTo((_a = {}, _a[scrollDir] = scrollPosition, _a.behavior = DEFAULT_SCROLL_BEHAVIOR, _a));\n      } else if (currentScrollOffset > tabOffset) {\n        scrollPosition = tabOffset;\n        list.scrollTo((_b = {}, _b[scrollDir] = scrollPosition, _b.behavior = DEFAULT_SCROLL_BEHAVIOR, _b));\n      }\n    }\n  };\n  TabStripNavigation.prototype.horizontalScroll = function () {\n    return /top|bottom/.test(this.props.tabPosition || 'top');\n  };\n  /**\n   * @hidden\n   */\n  TabStripNavigation.propTypes = {\n    children: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]),\n    onSelect: PropTypes.func,\n    onKeyDown: PropTypes.func,\n    selected: PropTypes.number,\n    tabIndex: PropTypes.number\n  };\n  return TabStripNavigation;\n}(React.Component);\nexport { TabStripNavigation };","map":null,"metadata":{},"sourceType":"module"}