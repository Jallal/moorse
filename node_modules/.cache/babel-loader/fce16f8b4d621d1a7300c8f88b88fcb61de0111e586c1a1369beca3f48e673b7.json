{"ast":null,"code":"import { Scalar } from '../nodes/Scalar.js';\nimport { foldFlowLines, FOLD_QUOTED, FOLD_FLOW, FOLD_BLOCK } from './foldFlowLines.js';\nconst getFoldOptions = ctx => ({\n  indentAtStart: ctx.indentAtStart,\n  lineWidth: ctx.options.lineWidth,\n  minContentWidth: ctx.options.minContentWidth\n});\n// Also checks for lines starting with %, as parsing the output as YAML 1.1 will\n// presume that's starting a new document.\nconst containsDocumentMarker = str => /^(%|---|\\.\\.\\.)/m.test(str);\nfunction lineLengthOverLimit(str, lineWidth, indentLength) {\n  if (!lineWidth || lineWidth < 0) return false;\n  const limit = lineWidth - indentLength;\n  const strLen = str.length;\n  if (strLen <= limit) return false;\n  for (let i = 0, start = 0; i < strLen; ++i) {\n    if (str[i] === '\\n') {\n      if (i - start > limit) return true;\n      start = i + 1;\n      if (strLen - start <= limit) return false;\n    }\n  }\n  return true;\n}\nfunction doubleQuotedString(value, ctx) {\n  const json = JSON.stringify(value);\n  if (ctx.options.doubleQuotedAsJSON) return json;\n  const {\n    implicitKey\n  } = ctx;\n  const minMultiLineLength = ctx.options.doubleQuotedMinMultiLineLength;\n  const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');\n  let str = '';\n  let start = 0;\n  for (let i = 0, ch = json[i]; ch; ch = json[++i]) {\n    if (ch === ' ' && json[i + 1] === '\\\\' && json[i + 2] === 'n') {\n      // space before newline needs to be escaped to not be folded\n      str += json.slice(start, i) + '\\\\ ';\n      i += 1;\n      start = i;\n      ch = '\\\\';\n    }\n    if (ch === '\\\\') switch (json[i + 1]) {\n      case 'u':\n        {\n          str += json.slice(start, i);\n          const code = json.substr(i + 2, 4);\n          switch (code) {\n            case '0000':\n              str += '\\\\0';\n              break;\n            case '0007':\n              str += '\\\\a';\n              break;\n            case '000b':\n              str += '\\\\v';\n              break;\n            case '001b':\n              str += '\\\\e';\n              break;\n            case '0085':\n              str += '\\\\N';\n              break;\n            case '00a0':\n              str += '\\\\_';\n              break;\n            case '2028':\n              str += '\\\\L';\n              break;\n            case '2029':\n              str += '\\\\P';\n              break;\n            default:\n              if (code.substr(0, 2) === '00') str += '\\\\x' + code.substr(2);else str += json.substr(i, 6);\n          }\n          i += 5;\n          start = i + 1;\n        }\n        break;\n      case 'n':\n        if (implicitKey || json[i + 2] === '\"' || json.length < minMultiLineLength) {\n          i += 1;\n        } else {\n          // folding will eat first newline\n          str += json.slice(start, i) + '\\n\\n';\n          while (json[i + 2] === '\\\\' && json[i + 3] === 'n' && json[i + 4] !== '\"') {\n            str += '\\n';\n            i += 2;\n          }\n          str += indent;\n          // space after newline needs to be escaped to not be folded\n          if (json[i + 2] === ' ') str += '\\\\';\n          i += 1;\n          start = i + 1;\n        }\n        break;\n      default:\n        i += 1;\n    }\n  }\n  str = start ? str + json.slice(start) : json;\n  return implicitKey ? str : foldFlowLines(str, indent, FOLD_QUOTED, getFoldOptions(ctx));\n}\nfunction singleQuotedString(value, ctx) {\n  if (ctx.options.singleQuote === false || ctx.implicitKey && value.includes('\\n') || /[ \\t]\\n|\\n[ \\t]/.test(value) // single quoted string can't have leading or trailing whitespace around newline\n  ) return doubleQuotedString(value, ctx);\n  const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');\n  const res = \"'\" + value.replace(/'/g, \"''\").replace(/\\n+/g, `$&\\n${indent}`) + \"'\";\n  return ctx.implicitKey ? res : foldFlowLines(res, indent, FOLD_FLOW, getFoldOptions(ctx));\n}\nfunction quotedString(value, ctx) {\n  const {\n    singleQuote\n  } = ctx.options;\n  let qs;\n  if (singleQuote === false) qs = doubleQuotedString;else {\n    const hasDouble = value.includes('\"');\n    const hasSingle = value.includes(\"'\");\n    if (hasDouble && !hasSingle) qs = singleQuotedString;else if (hasSingle && !hasDouble) qs = doubleQuotedString;else qs = singleQuote ? singleQuotedString : doubleQuotedString;\n  }\n  return qs(value, ctx);\n}\nfunction blockString(_ref, ctx, onComment, onChompKeep) {\n  let {\n    comment,\n    type,\n    value\n  } = _ref;\n  const {\n    blockQuote,\n    commentString,\n    lineWidth\n  } = ctx.options;\n  // 1. Block can't end in whitespace unless the last line is non-empty.\n  // 2. Strings consisting of only whitespace are best rendered explicitly.\n  if (!blockQuote || /\\n[\\t ]+$/.test(value) || /^\\s*$/.test(value)) {\n    return quotedString(value, ctx);\n  }\n  const indent = ctx.indent || (ctx.forceBlockIndent || containsDocumentMarker(value) ? '  ' : '');\n  const literal = blockQuote === 'literal' ? true : blockQuote === 'folded' || type === Scalar.BLOCK_FOLDED ? false : type === Scalar.BLOCK_LITERAL ? true : !lineLengthOverLimit(value, lineWidth, indent.length);\n  if (!value) return literal ? '|\\n' : '>\\n';\n  // determine chomping from whitespace at value end\n  let chomp;\n  let endStart;\n  for (endStart = value.length; endStart > 0; --endStart) {\n    const ch = value[endStart - 1];\n    if (ch !== '\\n' && ch !== '\\t' && ch !== ' ') break;\n  }\n  let end = value.substring(endStart);\n  const endNlPos = end.indexOf('\\n');\n  if (endNlPos === -1) {\n    chomp = '-'; // strip\n  } else if (value === end || endNlPos !== end.length - 1) {\n    chomp = '+'; // keep\n    if (onChompKeep) onChompKeep();\n  } else {\n    chomp = ''; // clip\n  }\n\n  if (end) {\n    value = value.slice(0, -end.length);\n    if (end[end.length - 1] === '\\n') end = end.slice(0, -1);\n    end = end.replace(/\\n+(?!\\n|$)/g, `$&${indent}`);\n  }\n  // determine indent indicator from whitespace at value start\n  let startWithSpace = false;\n  let startEnd;\n  let startNlPos = -1;\n  for (startEnd = 0; startEnd < value.length; ++startEnd) {\n    const ch = value[startEnd];\n    if (ch === ' ') startWithSpace = true;else if (ch === '\\n') startNlPos = startEnd;else break;\n  }\n  let start = value.substring(0, startNlPos < startEnd ? startNlPos + 1 : startEnd);\n  if (start) {\n    value = value.substring(start.length);\n    start = start.replace(/\\n+/g, `$&${indent}`);\n  }\n  const indentSize = indent ? '2' : '1'; // root is at -1\n  let header = (literal ? '|' : '>') + (startWithSpace ? indentSize : '') + chomp;\n  if (comment) {\n    header += ' ' + commentString(comment.replace(/ ?[\\r\\n]+/g, ' '));\n    if (onComment) onComment();\n  }\n  if (literal) {\n    value = value.replace(/\\n+/g, `$&${indent}`);\n    return `${header}\\n${indent}${start}${value}${end}`;\n  }\n  value = value.replace(/\\n+/g, '\\n$&').replace(/(?:^|\\n)([\\t ].*)(?:([\\n\\t ]*)\\n(?![\\n\\t ]))?/g, '$1$2') // more-indented lines aren't folded\n  //                ^ more-ind. ^ empty     ^ capture next empty lines only at end of indent\n  .replace(/\\n+/g, `$&${indent}`);\n  const body = foldFlowLines(`${start}${value}${end}`, indent, FOLD_BLOCK, getFoldOptions(ctx));\n  return `${header}\\n${indent}${body}`;\n}\nfunction plainString(item, ctx, onComment, onChompKeep) {\n  const {\n    type,\n    value\n  } = item;\n  const {\n    actualString,\n    implicitKey,\n    indent,\n    indentStep,\n    inFlow\n  } = ctx;\n  if (implicitKey && /[\\n[\\]{},]/.test(value) || inFlow && /[[\\]{},]/.test(value)) {\n    return quotedString(value, ctx);\n  }\n  if (!value || /^[\\n\\t ,[\\]{}#&*!|>'\"%@`]|^[?-]$|^[?-][ \\t]|[\\n:][ \\t]|[ \\t]\\n|[\\n\\t ]#|[\\n\\t :]$/.test(value)) {\n    // not allowed:\n    // - empty string, '-' or '?'\n    // - start with an indicator character (except [?:-]) or /[?-] /\n    // - '\\n ', ': ' or ' \\n' anywhere\n    // - '#' not preceded by a non-space char\n    // - end with ' ' or ':'\n    return implicitKey || inFlow || !value.includes('\\n') ? quotedString(value, ctx) : blockString(item, ctx, onComment, onChompKeep);\n  }\n  if (!implicitKey && !inFlow && type !== Scalar.PLAIN && value.includes('\\n')) {\n    // Where allowed & type not set explicitly, prefer block style for multiline strings\n    return blockString(item, ctx, onComment, onChompKeep);\n  }\n  if (containsDocumentMarker(value)) {\n    if (indent === '') {\n      ctx.forceBlockIndent = true;\n      return blockString(item, ctx, onComment, onChompKeep);\n    } else if (implicitKey && indent === indentStep) {\n      return quotedString(value, ctx);\n    }\n  }\n  const str = value.replace(/\\n+/g, `$&\\n${indent}`);\n  // Verify that output will be parsed as a string, as e.g. plain numbers and\n  // booleans get parsed with those types in v1.2 (e.g. '42', 'true' & '0.9e-3'),\n  // and others in v1.1.\n  if (actualString) {\n    const test = tag => tag.default && tag.tag !== 'tag:yaml.org,2002:str' && tag.test?.test(str);\n    const {\n      compat,\n      tags\n    } = ctx.doc.schema;\n    if (tags.some(test) || compat?.some(test)) return quotedString(value, ctx);\n  }\n  return implicitKey ? str : foldFlowLines(str, indent, FOLD_FLOW, getFoldOptions(ctx));\n}\nfunction stringifyString(item, ctx, onComment, onChompKeep) {\n  const {\n    implicitKey,\n    inFlow\n  } = ctx;\n  const ss = typeof item.value === 'string' ? item : Object.assign({}, item, {\n    value: String(item.value)\n  });\n  let {\n    type\n  } = item;\n  if (type !== Scalar.QUOTE_DOUBLE) {\n    // force double quotes on control characters & unpaired surrogates\n    if (/[\\x00-\\x08\\x0b-\\x1f\\x7f-\\x9f\\u{D800}-\\u{DFFF}]/u.test(ss.value)) type = Scalar.QUOTE_DOUBLE;\n  }\n  const _stringify = _type => {\n    switch (_type) {\n      case Scalar.BLOCK_FOLDED:\n      case Scalar.BLOCK_LITERAL:\n        return implicitKey || inFlow ? quotedString(ss.value, ctx) // blocks are not valid inside flow containers\n        : blockString(ss, ctx, onComment, onChompKeep);\n      case Scalar.QUOTE_DOUBLE:\n        return doubleQuotedString(ss.value, ctx);\n      case Scalar.QUOTE_SINGLE:\n        return singleQuotedString(ss.value, ctx);\n      case Scalar.PLAIN:\n        return plainString(ss, ctx, onComment, onChompKeep);\n      default:\n        return null;\n    }\n  };\n  let res = _stringify(type);\n  if (res === null) {\n    const {\n      defaultKeyType,\n      defaultStringType\n    } = ctx.options;\n    const t = implicitKey && defaultKeyType || defaultStringType;\n    res = _stringify(t);\n    if (res === null) throw new Error(`Unsupported default string type ${t}`);\n  }\n  return res;\n}\nexport { stringifyString };","map":{"version":3,"names":["Scalar","foldFlowLines","FOLD_QUOTED","FOLD_FLOW","FOLD_BLOCK","getFoldOptions","ctx","indentAtStart","lineWidth","options","minContentWidth","containsDocumentMarker","str","test","lineLengthOverLimit","indentLength","limit","strLen","length","i","start","doubleQuotedString","value","json","JSON","stringify","doubleQuotedAsJSON","implicitKey","minMultiLineLength","doubleQuotedMinMultiLineLength","indent","ch","slice","code","substr","singleQuotedString","singleQuote","includes","res","replace","quotedString","qs","hasDouble","hasSingle","blockString","onComment","onChompKeep","comment","type","blockQuote","commentString","forceBlockIndent","literal","BLOCK_FOLDED","BLOCK_LITERAL","chomp","endStart","end","substring","endNlPos","indexOf","startWithSpace","startEnd","startNlPos","indentSize","header","body","plainString","item","actualString","indentStep","inFlow","PLAIN","tag","default","compat","tags","doc","schema","some","stringifyString","ss","Object","assign","String","QUOTE_DOUBLE","_stringify","_type","QUOTE_SINGLE","defaultKeyType","defaultStringType","t","Error"],"sources":["/Users/jhazzatgmail.com/Documents/moorseapp/node_modules/yaml/browser/dist/stringify/stringifyString.js"],"sourcesContent":["import { Scalar } from '../nodes/Scalar.js';\nimport { foldFlowLines, FOLD_QUOTED, FOLD_FLOW, FOLD_BLOCK } from './foldFlowLines.js';\n\nconst getFoldOptions = (ctx) => ({\n    indentAtStart: ctx.indentAtStart,\n    lineWidth: ctx.options.lineWidth,\n    minContentWidth: ctx.options.minContentWidth\n});\n// Also checks for lines starting with %, as parsing the output as YAML 1.1 will\n// presume that's starting a new document.\nconst containsDocumentMarker = (str) => /^(%|---|\\.\\.\\.)/m.test(str);\nfunction lineLengthOverLimit(str, lineWidth, indentLength) {\n    if (!lineWidth || lineWidth < 0)\n        return false;\n    const limit = lineWidth - indentLength;\n    const strLen = str.length;\n    if (strLen <= limit)\n        return false;\n    for (let i = 0, start = 0; i < strLen; ++i) {\n        if (str[i] === '\\n') {\n            if (i - start > limit)\n                return true;\n            start = i + 1;\n            if (strLen - start <= limit)\n                return false;\n        }\n    }\n    return true;\n}\nfunction doubleQuotedString(value, ctx) {\n    const json = JSON.stringify(value);\n    if (ctx.options.doubleQuotedAsJSON)\n        return json;\n    const { implicitKey } = ctx;\n    const minMultiLineLength = ctx.options.doubleQuotedMinMultiLineLength;\n    const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');\n    let str = '';\n    let start = 0;\n    for (let i = 0, ch = json[i]; ch; ch = json[++i]) {\n        if (ch === ' ' && json[i + 1] === '\\\\' && json[i + 2] === 'n') {\n            // space before newline needs to be escaped to not be folded\n            str += json.slice(start, i) + '\\\\ ';\n            i += 1;\n            start = i;\n            ch = '\\\\';\n        }\n        if (ch === '\\\\')\n            switch (json[i + 1]) {\n                case 'u':\n                    {\n                        str += json.slice(start, i);\n                        const code = json.substr(i + 2, 4);\n                        switch (code) {\n                            case '0000':\n                                str += '\\\\0';\n                                break;\n                            case '0007':\n                                str += '\\\\a';\n                                break;\n                            case '000b':\n                                str += '\\\\v';\n                                break;\n                            case '001b':\n                                str += '\\\\e';\n                                break;\n                            case '0085':\n                                str += '\\\\N';\n                                break;\n                            case '00a0':\n                                str += '\\\\_';\n                                break;\n                            case '2028':\n                                str += '\\\\L';\n                                break;\n                            case '2029':\n                                str += '\\\\P';\n                                break;\n                            default:\n                                if (code.substr(0, 2) === '00')\n                                    str += '\\\\x' + code.substr(2);\n                                else\n                                    str += json.substr(i, 6);\n                        }\n                        i += 5;\n                        start = i + 1;\n                    }\n                    break;\n                case 'n':\n                    if (implicitKey ||\n                        json[i + 2] === '\"' ||\n                        json.length < minMultiLineLength) {\n                        i += 1;\n                    }\n                    else {\n                        // folding will eat first newline\n                        str += json.slice(start, i) + '\\n\\n';\n                        while (json[i + 2] === '\\\\' &&\n                            json[i + 3] === 'n' &&\n                            json[i + 4] !== '\"') {\n                            str += '\\n';\n                            i += 2;\n                        }\n                        str += indent;\n                        // space after newline needs to be escaped to not be folded\n                        if (json[i + 2] === ' ')\n                            str += '\\\\';\n                        i += 1;\n                        start = i + 1;\n                    }\n                    break;\n                default:\n                    i += 1;\n            }\n    }\n    str = start ? str + json.slice(start) : json;\n    return implicitKey\n        ? str\n        : foldFlowLines(str, indent, FOLD_QUOTED, getFoldOptions(ctx));\n}\nfunction singleQuotedString(value, ctx) {\n    if (ctx.options.singleQuote === false ||\n        (ctx.implicitKey && value.includes('\\n')) ||\n        /[ \\t]\\n|\\n[ \\t]/.test(value) // single quoted string can't have leading or trailing whitespace around newline\n    )\n        return doubleQuotedString(value, ctx);\n    const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');\n    const res = \"'\" + value.replace(/'/g, \"''\").replace(/\\n+/g, `$&\\n${indent}`) + \"'\";\n    return ctx.implicitKey\n        ? res\n        : foldFlowLines(res, indent, FOLD_FLOW, getFoldOptions(ctx));\n}\nfunction quotedString(value, ctx) {\n    const { singleQuote } = ctx.options;\n    let qs;\n    if (singleQuote === false)\n        qs = doubleQuotedString;\n    else {\n        const hasDouble = value.includes('\"');\n        const hasSingle = value.includes(\"'\");\n        if (hasDouble && !hasSingle)\n            qs = singleQuotedString;\n        else if (hasSingle && !hasDouble)\n            qs = doubleQuotedString;\n        else\n            qs = singleQuote ? singleQuotedString : doubleQuotedString;\n    }\n    return qs(value, ctx);\n}\nfunction blockString({ comment, type, value }, ctx, onComment, onChompKeep) {\n    const { blockQuote, commentString, lineWidth } = ctx.options;\n    // 1. Block can't end in whitespace unless the last line is non-empty.\n    // 2. Strings consisting of only whitespace are best rendered explicitly.\n    if (!blockQuote || /\\n[\\t ]+$/.test(value) || /^\\s*$/.test(value)) {\n        return quotedString(value, ctx);\n    }\n    const indent = ctx.indent ||\n        (ctx.forceBlockIndent || containsDocumentMarker(value) ? '  ' : '');\n    const literal = blockQuote === 'literal'\n        ? true\n        : blockQuote === 'folded' || type === Scalar.BLOCK_FOLDED\n            ? false\n            : type === Scalar.BLOCK_LITERAL\n                ? true\n                : !lineLengthOverLimit(value, lineWidth, indent.length);\n    if (!value)\n        return literal ? '|\\n' : '>\\n';\n    // determine chomping from whitespace at value end\n    let chomp;\n    let endStart;\n    for (endStart = value.length; endStart > 0; --endStart) {\n        const ch = value[endStart - 1];\n        if (ch !== '\\n' && ch !== '\\t' && ch !== ' ')\n            break;\n    }\n    let end = value.substring(endStart);\n    const endNlPos = end.indexOf('\\n');\n    if (endNlPos === -1) {\n        chomp = '-'; // strip\n    }\n    else if (value === end || endNlPos !== end.length - 1) {\n        chomp = '+'; // keep\n        if (onChompKeep)\n            onChompKeep();\n    }\n    else {\n        chomp = ''; // clip\n    }\n    if (end) {\n        value = value.slice(0, -end.length);\n        if (end[end.length - 1] === '\\n')\n            end = end.slice(0, -1);\n        end = end.replace(/\\n+(?!\\n|$)/g, `$&${indent}`);\n    }\n    // determine indent indicator from whitespace at value start\n    let startWithSpace = false;\n    let startEnd;\n    let startNlPos = -1;\n    for (startEnd = 0; startEnd < value.length; ++startEnd) {\n        const ch = value[startEnd];\n        if (ch === ' ')\n            startWithSpace = true;\n        else if (ch === '\\n')\n            startNlPos = startEnd;\n        else\n            break;\n    }\n    let start = value.substring(0, startNlPos < startEnd ? startNlPos + 1 : startEnd);\n    if (start) {\n        value = value.substring(start.length);\n        start = start.replace(/\\n+/g, `$&${indent}`);\n    }\n    const indentSize = indent ? '2' : '1'; // root is at -1\n    let header = (literal ? '|' : '>') + (startWithSpace ? indentSize : '') + chomp;\n    if (comment) {\n        header += ' ' + commentString(comment.replace(/ ?[\\r\\n]+/g, ' '));\n        if (onComment)\n            onComment();\n    }\n    if (literal) {\n        value = value.replace(/\\n+/g, `$&${indent}`);\n        return `${header}\\n${indent}${start}${value}${end}`;\n    }\n    value = value\n        .replace(/\\n+/g, '\\n$&')\n        .replace(/(?:^|\\n)([\\t ].*)(?:([\\n\\t ]*)\\n(?![\\n\\t ]))?/g, '$1$2') // more-indented lines aren't folded\n        //                ^ more-ind. ^ empty     ^ capture next empty lines only at end of indent\n        .replace(/\\n+/g, `$&${indent}`);\n    const body = foldFlowLines(`${start}${value}${end}`, indent, FOLD_BLOCK, getFoldOptions(ctx));\n    return `${header}\\n${indent}${body}`;\n}\nfunction plainString(item, ctx, onComment, onChompKeep) {\n    const { type, value } = item;\n    const { actualString, implicitKey, indent, indentStep, inFlow } = ctx;\n    if ((implicitKey && /[\\n[\\]{},]/.test(value)) ||\n        (inFlow && /[[\\]{},]/.test(value))) {\n        return quotedString(value, ctx);\n    }\n    if (!value ||\n        /^[\\n\\t ,[\\]{}#&*!|>'\"%@`]|^[?-]$|^[?-][ \\t]|[\\n:][ \\t]|[ \\t]\\n|[\\n\\t ]#|[\\n\\t :]$/.test(value)) {\n        // not allowed:\n        // - empty string, '-' or '?'\n        // - start with an indicator character (except [?:-]) or /[?-] /\n        // - '\\n ', ': ' or ' \\n' anywhere\n        // - '#' not preceded by a non-space char\n        // - end with ' ' or ':'\n        return implicitKey || inFlow || !value.includes('\\n')\n            ? quotedString(value, ctx)\n            : blockString(item, ctx, onComment, onChompKeep);\n    }\n    if (!implicitKey &&\n        !inFlow &&\n        type !== Scalar.PLAIN &&\n        value.includes('\\n')) {\n        // Where allowed & type not set explicitly, prefer block style for multiline strings\n        return blockString(item, ctx, onComment, onChompKeep);\n    }\n    if (containsDocumentMarker(value)) {\n        if (indent === '') {\n            ctx.forceBlockIndent = true;\n            return blockString(item, ctx, onComment, onChompKeep);\n        }\n        else if (implicitKey && indent === indentStep) {\n            return quotedString(value, ctx);\n        }\n    }\n    const str = value.replace(/\\n+/g, `$&\\n${indent}`);\n    // Verify that output will be parsed as a string, as e.g. plain numbers and\n    // booleans get parsed with those types in v1.2 (e.g. '42', 'true' & '0.9e-3'),\n    // and others in v1.1.\n    if (actualString) {\n        const test = (tag) => tag.default && tag.tag !== 'tag:yaml.org,2002:str' && tag.test?.test(str);\n        const { compat, tags } = ctx.doc.schema;\n        if (tags.some(test) || compat?.some(test))\n            return quotedString(value, ctx);\n    }\n    return implicitKey\n        ? str\n        : foldFlowLines(str, indent, FOLD_FLOW, getFoldOptions(ctx));\n}\nfunction stringifyString(item, ctx, onComment, onChompKeep) {\n    const { implicitKey, inFlow } = ctx;\n    const ss = typeof item.value === 'string'\n        ? item\n        : Object.assign({}, item, { value: String(item.value) });\n    let { type } = item;\n    if (type !== Scalar.QUOTE_DOUBLE) {\n        // force double quotes on control characters & unpaired surrogates\n        if (/[\\x00-\\x08\\x0b-\\x1f\\x7f-\\x9f\\u{D800}-\\u{DFFF}]/u.test(ss.value))\n            type = Scalar.QUOTE_DOUBLE;\n    }\n    const _stringify = (_type) => {\n        switch (_type) {\n            case Scalar.BLOCK_FOLDED:\n            case Scalar.BLOCK_LITERAL:\n                return implicitKey || inFlow\n                    ? quotedString(ss.value, ctx) // blocks are not valid inside flow containers\n                    : blockString(ss, ctx, onComment, onChompKeep);\n            case Scalar.QUOTE_DOUBLE:\n                return doubleQuotedString(ss.value, ctx);\n            case Scalar.QUOTE_SINGLE:\n                return singleQuotedString(ss.value, ctx);\n            case Scalar.PLAIN:\n                return plainString(ss, ctx, onComment, onChompKeep);\n            default:\n                return null;\n        }\n    };\n    let res = _stringify(type);\n    if (res === null) {\n        const { defaultKeyType, defaultStringType } = ctx.options;\n        const t = (implicitKey && defaultKeyType) || defaultStringType;\n        res = _stringify(t);\n        if (res === null)\n            throw new Error(`Unsupported default string type ${t}`);\n    }\n    return res;\n}\n\nexport { stringifyString };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}