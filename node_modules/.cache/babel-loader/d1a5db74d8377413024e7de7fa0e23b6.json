{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames, kendoThemeMaps } from '@progress/kendo-react-common';\nimport { validatePackage } from '@progress/kendo-react-common';\nimport { packageMetadata } from './package-metadata';\n/**\n * @hidden\n */\nfunction iconElement(_a) {\n  var imageUrl = _a.imageUrl,\n    icon = _a.icon,\n    iconClass = _a.iconClass,\n    imageAlt = _a.imageAlt;\n  if (imageUrl) {\n    return React.createElement(\"img\", {\n      role: \"presentation\",\n      className: 'k-button-icon',\n      alt: imageAlt,\n      src: imageUrl\n    });\n  } else if (icon) {\n    var iconClasses = classNames('k-button-icon k-icon', 'k-i-' + icon);\n    return React.createElement(\"span\", {\n      role: \"presentation\",\n      className: iconClasses\n    });\n  } else if (iconClass) {\n    return React.createElement(\"span\", {\n      role: \"presentation\",\n      className: classNames('k-button-icon', iconClass)\n    });\n  }\n  return null;\n}\nvar Button = /** @class */function (_super) {\n  __extends(Button, _super);\n  function Button(props) {\n    var _this = _super.call(this, props) || this;\n    _this._element = null;\n    _this.handleClick = function (event) {\n      _this.toggleIfApplicable();\n      if (_this.props.onClick) {\n        _this.props.onClick.call(undefined, event);\n      }\n    };\n    validatePackage(packageMetadata);\n    _this.state = {\n      selected: _this.props.togglable === true && _this.props.selected === true\n    };\n    return _this;\n  }\n  Object.defineProperty(Button.prototype, \"element\", {\n    /**\n     * Gets the DOM element of the Button component.\n     */\n    get: function get() {\n      return this._element;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Button.prototype, \"selected\", {\n    /**\n     * Returns `true` when the component is togglable and selected ([see example]({% slug toggleable_button %})).\n     * Otherwise, returns `false`.\n     */\n    get: function get() {\n      return this._selectedTemp !== undefined ? this._selectedTemp : this.state.selected;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n  Button.getDerivedStateFromProps = function (props, state) {\n    if (props.togglable && props.selected !== undefined && props.selected !== state.selected) {\n      return {\n        selected: props.selected\n      };\n    }\n    return null;\n  };\n  /**\n   * @hidden\n   */\n  Button.prototype.render = function () {\n    var _a;\n    var _this = this;\n    var _b = this.props,\n      children = _b.children,\n      togglable = _b.togglable,\n      icon = _b.icon,\n      iconClass = _b.iconClass,\n      imageUrl = _b.imageUrl,\n      imageAlt = _b.imageAlt,\n      className = _b.className,\n      onClick = _b.onClick,\n      _c = _b.size,\n      size = _c === void 0 ? Button.defaultProps.size : _c,\n      _d = _b.shape,\n      shape = _d === void 0 ? Button.defaultProps.shape : _d,\n      _e = _b.rounded,\n      rounded = _e === void 0 ? Button.defaultProps.rounded : _e,\n      _f = _b.fillMode,\n      fillMode = _f === void 0 ? Button.defaultProps.fillMode : _f,\n      _g = _b.themeColor,\n      themeColor = _g === void 0 ? Button.defaultProps.themeColor : _g,\n      htmlAttributes = __rest(_b, [\"children\", \"togglable\", \"icon\", \"iconClass\", \"imageUrl\", \"imageAlt\", \"className\", \"onClick\", \"size\", \"shape\", \"rounded\", \"fillMode\", \"themeColor\"]);\n    var hasIcon = icon !== undefined || iconClass !== undefined || imageUrl !== undefined;\n    var hasChildren = children !== undefined;\n    var iconEl = iconElement({\n      icon: icon,\n      iconClass: iconClass,\n      imageUrl: imageUrl,\n      imageAlt: imageAlt\n    });\n    return React.createElement(\"button\", __assign({\n      ref: function ref(button) {\n        return _this._element = button;\n      },\n      \"aria-pressed\": togglable ? this.state.selected : undefined\n    }, htmlAttributes, {\n      onClick: this.handleClick,\n      className: classNames('k-button', (_a = {}, _a[\"k-button-\".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a[\"k-button-\".concat(shape)] = shape, _a[\"k-button-\".concat(fillMode)] = fillMode, _a[\"k-button-\".concat(fillMode, \"-\").concat(themeColor)] = Boolean(fillMode && themeColor), _a[\"k-rounded-\".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a['k-icon-button'] = !hasChildren && hasIcon, _a['k-disabled'] = this.props.disabled, _a['k-selected'] = this.state.selected, _a['k-rtl'] = this.props.dir === 'rtl', _a), this.props.className)\n    }), iconEl, children && React.createElement(\"span\", {\n      className: \"k-button-text\"\n    }, children));\n  };\n  Button.prototype.toggleIfApplicable = function () {\n    var _this = this;\n    if (this.props.togglable && this.props.selected === undefined) {\n      var selected = !this.state.selected;\n      this._selectedTemp = selected;\n      this.setState({\n        selected: selected\n      }, function () {\n        return _this._selectedTemp = undefined;\n      });\n    }\n  };\n  /**\n   * @hidden\n   */\n  Button.propTypes = {\n    children: PropTypes.node,\n    selected: PropTypes.bool,\n    togglable: PropTypes.bool,\n    icon: PropTypes.string,\n    iconClass: PropTypes.string,\n    imageUrl: PropTypes.string,\n    imageAlt: PropTypes.string,\n    size: PropTypes.oneOf([null, 'small', 'medium', 'large']),\n    shape: PropTypes.oneOf([null, 'rectangle', 'square']),\n    rounded: PropTypes.oneOf([null, 'small', 'medium', 'large', 'full']),\n    fillMode: PropTypes.oneOf([null, 'flat', 'link', 'outline', 'solid']),\n    // eslint-disable-next-line max-len\n    themeColor: PropTypes.oneOf([null, 'base', 'primary', 'secondary', 'tertiary', 'info', 'success', 'warning', 'error', 'dark', 'light', 'inverse'])\n  };\n  /**\n   * @hidden\n   */\n  Button.defaultProps = {\n    togglable: false,\n    size: 'medium',\n    shape: null,\n    rounded: 'medium',\n    fillMode: 'solid',\n    themeColor: 'base'\n  };\n  return Button;\n}(React.Component);\nexport { Button };","map":null,"metadata":{},"sourceType":"module"}