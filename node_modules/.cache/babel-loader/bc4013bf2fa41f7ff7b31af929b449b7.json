{"ast":null,"code":"import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames, getTabIndex, useRtl, validatePackage, dispatchEvent, Keys, useAsyncFocusBlur, Icon } from '@progress/kendo-react-common';\nimport { packageMetadata } from '../package-metadata';\n/**\n * Represents the [KendoReact ExpansionPanel component]({% slug overview_expansionpanel %}).\n */\nexport var ExpansionPanel = React.forwardRef(function (props, target) {\n  var _a, _b;\n  validatePackage(packageMetadata);\n  var elementRef = React.useRef(null);\n  var _c = React.useState(false),\n    focused = _c[0],\n    setFocused = _c[1];\n  var getImperativeHandle = React.useCallback(function () {\n    return {\n      element: elementRef.current\n    };\n  }, []);\n  React.useImperativeHandle(target, getImperativeHandle);\n  var _d = props.expanded,\n    expanded = _d === void 0 ? false : _d,\n    disabled = props.disabled,\n    title = props.title,\n    subtitle = props.subtitle,\n    onAction = props.onAction,\n    expandIcon = props.expandIcon,\n    collapseIcon = props.collapseIcon;\n  var onClick = React.useCallback(function (event) {\n    dispatchEvent(onAction, event, getImperativeHandle(), {\n      expanded: expanded\n    });\n  }, [onAction, expanded]);\n  var onKeyDown = React.useCallback(function (event) {\n    if (event.keyCode === Keys.enter || event.keyCode === Keys.space) {\n      event.preventDefault();\n      dispatchEvent(onAction, event, getImperativeHandle(), {\n        expanded: expanded\n      });\n    }\n  }, [onAction, expanded]);\n  var handleFocus = React.useCallback(function () {\n    if (props.disabled) {\n      return;\n    }\n    setFocused(true);\n  }, [props.disabled]);\n  var handleBlur = React.useCallback(function () {\n    if (props.disabled) {\n      return;\n    }\n    setFocused(false);\n  }, [props.disabled]);\n  var _e = useAsyncFocusBlur({\n      onFocus: handleFocus,\n      onBlur: handleBlur\n    }),\n    onFocus = _e.onFocus,\n    onBlur = _e.onBlur;\n  return React.createElement(\"div\", {\n    ref: elementRef,\n    className: classNames('k-expander', props.className, {\n      'k-expanded': expanded,\n      'k-focus': focused && !disabled,\n      'k-disabled': disabled\n    }),\n    onFocus: onFocus,\n    onBlur: onBlur,\n    style: props.style,\n    id: props.id,\n    dir: useRtl(elementRef, props.dir),\n    onKeyDown: disabled ? undefined : onKeyDown\n  }, React.createElement(\"div\", {\n    role: 'button',\n    \"aria-controls\": props.ariaControls,\n    \"aria-expanded\": expanded,\n    \"aria-disabled\": disabled,\n    tabIndex: getTabIndex(props.tabIndex, disabled),\n    className: \"k-expander-header\",\n    onClick: disabled ? undefined : onClick\n  }, title !== undefined ? React.createElement(\"div\", {\n    className: \"k-expander-title\"\n  }, title) : undefined, React.createElement(\"span\", {\n    className: \"k-spacer\"\n  }), subtitle !== undefined ? React.createElement(\"div\", {\n    className: \"k-expander-sub-title\"\n  }, subtitle) : undefined, React.createElement(\"span\", {\n    className: \"k-expander-indicator\"\n  }, React.createElement(Icon, {\n    name: !expanded ? !expandIcon ? 'chevron-down' : undefined : !collapseIcon ? 'chevron-up' : undefined,\n    className: classNames(expanded ? (_a = {}, _a[String(collapseIcon)] = Boolean(collapseIcon), _a) : (_b = {}, _b[String(expandIcon)] = Boolean(expandIcon), _b))\n  }))), props.children);\n});\nExpansionPanel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  dir: PropTypes.string,\n  id: PropTypes.string,\n  tabIndex: PropTypes.number,\n  title: PropTypes.node,\n  subtitle: PropTypes.node,\n  expandIcon: PropTypes.string,\n  collapseIcon: PropTypes.string,\n  expanded: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onAction: PropTypes.func\n};\nExpansionPanel.displayName = 'KendoReactExpansionPanel';","map":null,"metadata":{},"sourceType":"module"}