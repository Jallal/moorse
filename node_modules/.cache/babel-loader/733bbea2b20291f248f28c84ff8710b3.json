{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from '../package-metadata';\nimport { classNames, useDir, dispatchEvent } from '@progress/kendo-react-common';\nimport { BreadcrumbListItem } from './BreadcrumbListItem';\nimport { BreadcrumbDelimiter } from './BreadcrumbDelimiter';\nimport { BreadcrumbLink } from './BreadcrumbLink';\nimport { BreadcrumbOrderedList } from './BreadcrumbOrderedList';\n/**\n * Represents the Breadcrumb component.\n */\nexport var Breadcrumb = React.forwardRef(function (props, ref) {\n  validatePackage(packageMetadata);\n  var target = React.useRef(null);\n  var breadcrumbRef = React.useRef(null);\n  var OrderedListComponent = React.useMemo(function () {\n    return props.breadcrumbOrderedList || BreadcrumbOrderedList;\n  }, [props.breadcrumbOrderedList]);\n  var ListItemComponent = React.useMemo(function () {\n    return props.breadcrumbListItem || BreadcrumbListItem;\n  }, [props.breadcrumbListItem]);\n  var DelimiterComponent = React.useMemo(function () {\n    return props.breadcrumbDelimiter || BreadcrumbDelimiter;\n  }, [props.breadcrumbDelimiter]);\n  var LinkComponent = React.useMemo(function () {\n    return props.breadcrumbLink || BreadcrumbLink;\n  }, [props.breadcrumbLink]);\n  var focus = React.useCallback(function () {\n    if (breadcrumbRef.current) {\n      breadcrumbRef.current.focus();\n    }\n  }, [breadcrumbRef]);\n  var disabled = React.useMemo(function () {\n    return props.disabled || false;\n  }, [props.disabled]);\n  React.useImperativeHandle(target, function () {\n    return {\n      element: breadcrumbRef.current,\n      focus: focus,\n      props: props\n    };\n  });\n  React.useImperativeHandle(ref, function () {\n    return target.current;\n  });\n  var dir = useDir(breadcrumbRef, props.dir);\n  var handleItemSelect = function handleItemSelect(event) {\n    if (target.current) {\n      dispatchEvent(props.onItemSelect, event, event.target, {\n        id: event.target.id\n      });\n    }\n  };\n  var handleKeyDown = function handleKeyDown(event) {\n    if (target.current) {\n      dispatchEvent(props.onKeyDown, event, event.target, {\n        id: event.target.id\n      });\n    }\n  };\n  var valueField = props.valueField || defaultProps.valueField;\n  var iconField = props.iconField || defaultProps.iconField;\n  var iconClassField = props.iconClassField || defaultProps.iconClassField;\n  var textField = props.textField || defaultProps.textField;\n  return React.createElement(\"nav\", {\n    \"aria-label\": props.ariaLabel,\n    id: props.id,\n    style: props.style,\n    ref: breadcrumbRef,\n    dir: dir,\n    className: classNames('k-breadcrumb', {\n      'k-rtl': dir === 'rtl',\n      'k-disabled': disabled\n    }, props.className)\n  }, React.createElement(OrderedListComponent, null, React.createElement(React.Fragment, null, props.data.map(function (item, index, data) {\n    var key = item[valueField];\n    return React.createElement(ListItemComponent, {\n      key: key\n    }, index !== 0 && React.createElement(DelimiterComponent, null), React.createElement(LinkComponent, __assign({\n      isLast: data.length - 1 === index,\n      id: String(key),\n      icon: item[iconField] || undefined,\n      iconClass: item[iconClassField] ? String(item[iconClassField]) : undefined,\n      text: item[textField] ? String(item[textField]) : undefined,\n      disabled: item.disabled || false,\n      onItemSelect: handleItemSelect,\n      onKeyDown: handleKeyDown\n    }, props)));\n  }))));\n});\nvar propTypes = {\n  id: PropTypes.string,\n  style: PropTypes.object,\n  className: PropTypes.string,\n  breadcrumbOrderedList: PropTypes.elementType,\n  breadcrumbListItem: PropTypes.elementType,\n  breadcrumbDelimiter: PropTypes.elementType,\n  breadcrumbLink: PropTypes.elementType,\n  data: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    text: PropTypes.string,\n    icon: PropTypes.any,\n    iconClass: PropTypes.string\n  })),\n  dir: PropTypes.oneOf(['ltr', 'rtl']),\n  disabled: PropTypes.bool,\n  valueField: PropTypes.string,\n  textField: PropTypes.string,\n  iconField: PropTypes.string,\n  iconClassField: PropTypes.string,\n  onItemSelect: PropTypes.func,\n  ariaLabel: PropTypes.string\n};\nvar defaultProps = {\n  valueField: 'id',\n  textField: 'text',\n  iconField: 'icon',\n  iconClassField: 'iconClass'\n};\nBreadcrumb.displayName = 'KendoReactBreadcrumb';\n// TODO: delete casting when @types/react is updated!\nBreadcrumb.propTypes = propTypes;\nBreadcrumb.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}