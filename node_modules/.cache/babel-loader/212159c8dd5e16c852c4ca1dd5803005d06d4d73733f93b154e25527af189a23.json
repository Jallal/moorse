{"ast":null,"code":"import { Collection } from '../nodes/Collection.js';\nimport { isNode, isPair } from '../nodes/Node.js';\nimport { stringify } from './stringify.js';\nimport { lineComment, indentComment } from './stringifyComment.js';\nfunction stringifyCollection(collection, ctx, options) {\n  const flow = ctx.inFlow ?? collection.flow;\n  const stringify = flow ? stringifyFlowCollection : stringifyBlockCollection;\n  return stringify(collection, ctx, options);\n}\nfunction stringifyBlockCollection(_ref, ctx, _ref2) {\n  let {\n    comment,\n    items\n  } = _ref;\n  let {\n    blockItemPrefix,\n    flowChars,\n    itemIndent,\n    onChompKeep,\n    onComment\n  } = _ref2;\n  const {\n    indent,\n    options: {\n      commentString\n    }\n  } = ctx;\n  const itemCtx = Object.assign({}, ctx, {\n    indent: itemIndent,\n    type: null\n  });\n  let chompKeep = false; // flag for the preceding node's status\n  const lines = [];\n  for (let i = 0; i < items.length; ++i) {\n    const item = items[i];\n    let comment = null;\n    if (isNode(item)) {\n      if (!chompKeep && item.spaceBefore) lines.push('');\n      addCommentBefore(ctx, lines, item.commentBefore, chompKeep);\n      if (item.comment) comment = item.comment;\n    } else if (isPair(item)) {\n      const ik = isNode(item.key) ? item.key : null;\n      if (ik) {\n        if (!chompKeep && ik.spaceBefore) lines.push('');\n        addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);\n      }\n    }\n    chompKeep = false;\n    let str = stringify(item, itemCtx, () => comment = null, () => chompKeep = true);\n    if (comment) str += lineComment(str, itemIndent, commentString(comment));\n    if (chompKeep && comment) chompKeep = false;\n    lines.push(blockItemPrefix + str);\n  }\n  let str;\n  if (lines.length === 0) {\n    str = flowChars.start + flowChars.end;\n  } else {\n    str = lines[0];\n    for (let i = 1; i < lines.length; ++i) {\n      const line = lines[i];\n      str += line ? `\\n${indent}${line}` : '\\n';\n    }\n  }\n  if (comment) {\n    str += '\\n' + indentComment(commentString(comment), indent);\n    if (onComment) onComment();\n  } else if (chompKeep && onChompKeep) onChompKeep();\n  return str;\n}\nfunction stringifyFlowCollection(_ref3, ctx, _ref4) {\n  let {\n    comment,\n    items\n  } = _ref3;\n  let {\n    flowChars,\n    itemIndent,\n    onComment\n  } = _ref4;\n  const {\n    indent,\n    indentStep,\n    flowCollectionPadding: fcPadding,\n    options: {\n      commentString\n    }\n  } = ctx;\n  itemIndent += indentStep;\n  const itemCtx = Object.assign({}, ctx, {\n    indent: itemIndent,\n    inFlow: true,\n    type: null\n  });\n  let reqNewline = false;\n  let linesAtValue = 0;\n  const lines = [];\n  for (let i = 0; i < items.length; ++i) {\n    const item = items[i];\n    let comment = null;\n    if (isNode(item)) {\n      if (item.spaceBefore) lines.push('');\n      addCommentBefore(ctx, lines, item.commentBefore, false);\n      if (item.comment) comment = item.comment;\n    } else if (isPair(item)) {\n      const ik = isNode(item.key) ? item.key : null;\n      if (ik) {\n        if (ik.spaceBefore) lines.push('');\n        addCommentBefore(ctx, lines, ik.commentBefore, false);\n        if (ik.comment) reqNewline = true;\n      }\n      const iv = isNode(item.value) ? item.value : null;\n      if (iv) {\n        if (iv.comment) comment = iv.comment;\n        if (iv.commentBefore) reqNewline = true;\n      } else if (item.value == null && ik && ik.comment) {\n        comment = ik.comment;\n      }\n    }\n    if (comment) reqNewline = true;\n    let str = stringify(item, itemCtx, () => comment = null);\n    if (i < items.length - 1) str += ',';\n    if (comment) str += lineComment(str, itemIndent, commentString(comment));\n    if (!reqNewline && (lines.length > linesAtValue || str.includes('\\n'))) reqNewline = true;\n    lines.push(str);\n    linesAtValue = lines.length;\n  }\n  let str;\n  const {\n    start,\n    end\n  } = flowChars;\n  if (lines.length === 0) {\n    str = start + end;\n  } else {\n    if (!reqNewline) {\n      const len = lines.reduce((sum, line) => sum + line.length + 2, 2);\n      reqNewline = len > Collection.maxFlowStringSingleLineLength;\n    }\n    if (reqNewline) {\n      str = start;\n      for (const line of lines) str += line ? `\\n${indentStep}${indent}${line}` : '\\n';\n      str += `\\n${indent}${end}`;\n    } else {\n      str = `${start}${fcPadding}${lines.join(' ')}${fcPadding}${end}`;\n    }\n  }\n  if (comment) {\n    str += lineComment(str, commentString(comment), indent);\n    if (onComment) onComment();\n  }\n  return str;\n}\nfunction addCommentBefore(_ref5, lines, comment, chompKeep) {\n  let {\n    indent,\n    options: {\n      commentString\n    }\n  } = _ref5;\n  if (comment && chompKeep) comment = comment.replace(/^\\n+/, '');\n  if (comment) {\n    const ic = indentComment(commentString(comment), indent);\n    lines.push(ic.trimStart()); // Avoid double indent on first line\n  }\n}\n\nexport { stringifyCollection };","map":{"version":3,"names":["Collection","isNode","isPair","stringify","lineComment","indentComment","stringifyCollection","collection","ctx","options","flow","inFlow","stringifyFlowCollection","stringifyBlockCollection","comment","items","blockItemPrefix","flowChars","itemIndent","onChompKeep","onComment","indent","commentString","itemCtx","Object","assign","type","chompKeep","lines","i","length","item","spaceBefore","push","addCommentBefore","commentBefore","ik","key","str","start","end","line","indentStep","flowCollectionPadding","fcPadding","reqNewline","linesAtValue","iv","value","includes","len","reduce","sum","maxFlowStringSingleLineLength","join","replace","ic","trimStart"],"sources":["/workspaces/moorse/node_modules/yaml/browser/dist/stringify/stringifyCollection.js"],"sourcesContent":["import { Collection } from '../nodes/Collection.js';\nimport { isNode, isPair } from '../nodes/Node.js';\nimport { stringify } from './stringify.js';\nimport { lineComment, indentComment } from './stringifyComment.js';\n\nfunction stringifyCollection(collection, ctx, options) {\n    const flow = ctx.inFlow ?? collection.flow;\n    const stringify = flow ? stringifyFlowCollection : stringifyBlockCollection;\n    return stringify(collection, ctx, options);\n}\nfunction stringifyBlockCollection({ comment, items }, ctx, { blockItemPrefix, flowChars, itemIndent, onChompKeep, onComment }) {\n    const { indent, options: { commentString } } = ctx;\n    const itemCtx = Object.assign({}, ctx, { indent: itemIndent, type: null });\n    let chompKeep = false; // flag for the preceding node's status\n    const lines = [];\n    for (let i = 0; i < items.length; ++i) {\n        const item = items[i];\n        let comment = null;\n        if (isNode(item)) {\n            if (!chompKeep && item.spaceBefore)\n                lines.push('');\n            addCommentBefore(ctx, lines, item.commentBefore, chompKeep);\n            if (item.comment)\n                comment = item.comment;\n        }\n        else if (isPair(item)) {\n            const ik = isNode(item.key) ? item.key : null;\n            if (ik) {\n                if (!chompKeep && ik.spaceBefore)\n                    lines.push('');\n                addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);\n            }\n        }\n        chompKeep = false;\n        let str = stringify(item, itemCtx, () => (comment = null), () => (chompKeep = true));\n        if (comment)\n            str += lineComment(str, itemIndent, commentString(comment));\n        if (chompKeep && comment)\n            chompKeep = false;\n        lines.push(blockItemPrefix + str);\n    }\n    let str;\n    if (lines.length === 0) {\n        str = flowChars.start + flowChars.end;\n    }\n    else {\n        str = lines[0];\n        for (let i = 1; i < lines.length; ++i) {\n            const line = lines[i];\n            str += line ? `\\n${indent}${line}` : '\\n';\n        }\n    }\n    if (comment) {\n        str += '\\n' + indentComment(commentString(comment), indent);\n        if (onComment)\n            onComment();\n    }\n    else if (chompKeep && onChompKeep)\n        onChompKeep();\n    return str;\n}\nfunction stringifyFlowCollection({ comment, items }, ctx, { flowChars, itemIndent, onComment }) {\n    const { indent, indentStep, flowCollectionPadding: fcPadding, options: { commentString } } = ctx;\n    itemIndent += indentStep;\n    const itemCtx = Object.assign({}, ctx, {\n        indent: itemIndent,\n        inFlow: true,\n        type: null\n    });\n    let reqNewline = false;\n    let linesAtValue = 0;\n    const lines = [];\n    for (let i = 0; i < items.length; ++i) {\n        const item = items[i];\n        let comment = null;\n        if (isNode(item)) {\n            if (item.spaceBefore)\n                lines.push('');\n            addCommentBefore(ctx, lines, item.commentBefore, false);\n            if (item.comment)\n                comment = item.comment;\n        }\n        else if (isPair(item)) {\n            const ik = isNode(item.key) ? item.key : null;\n            if (ik) {\n                if (ik.spaceBefore)\n                    lines.push('');\n                addCommentBefore(ctx, lines, ik.commentBefore, false);\n                if (ik.comment)\n                    reqNewline = true;\n            }\n            const iv = isNode(item.value) ? item.value : null;\n            if (iv) {\n                if (iv.comment)\n                    comment = iv.comment;\n                if (iv.commentBefore)\n                    reqNewline = true;\n            }\n            else if (item.value == null && ik && ik.comment) {\n                comment = ik.comment;\n            }\n        }\n        if (comment)\n            reqNewline = true;\n        let str = stringify(item, itemCtx, () => (comment = null));\n        if (i < items.length - 1)\n            str += ',';\n        if (comment)\n            str += lineComment(str, itemIndent, commentString(comment));\n        if (!reqNewline && (lines.length > linesAtValue || str.includes('\\n')))\n            reqNewline = true;\n        lines.push(str);\n        linesAtValue = lines.length;\n    }\n    let str;\n    const { start, end } = flowChars;\n    if (lines.length === 0) {\n        str = start + end;\n    }\n    else {\n        if (!reqNewline) {\n            const len = lines.reduce((sum, line) => sum + line.length + 2, 2);\n            reqNewline = len > Collection.maxFlowStringSingleLineLength;\n        }\n        if (reqNewline) {\n            str = start;\n            for (const line of lines)\n                str += line ? `\\n${indentStep}${indent}${line}` : '\\n';\n            str += `\\n${indent}${end}`;\n        }\n        else {\n            str = `${start}${fcPadding}${lines.join(' ')}${fcPadding}${end}`;\n        }\n    }\n    if (comment) {\n        str += lineComment(str, commentString(comment), indent);\n        if (onComment)\n            onComment();\n    }\n    return str;\n}\nfunction addCommentBefore({ indent, options: { commentString } }, lines, comment, chompKeep) {\n    if (comment && chompKeep)\n        comment = comment.replace(/^\\n+/, '');\n    if (comment) {\n        const ic = indentComment(commentString(comment), indent);\n        lines.push(ic.trimStart()); // Avoid double indent on first line\n    }\n}\n\nexport { stringifyCollection };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}